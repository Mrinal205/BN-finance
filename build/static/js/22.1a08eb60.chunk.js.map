{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","variant","primaryToken","secondaryToken","flexDirection","split","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","tokenName","pid","onStake","useStakeFarms","onUnstake","useUnstakeFarms","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","amount","a","fetchFarmUserDataAsync","pids","handleUnstake","displayBalance","useCallback","stakedBalanceBigNumber","getBalanceAmount","gt","lt","getFullDisplayBalance","toLocaleString","toFixed","BigNumber","ROUND_DOWN","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","eq","Balance","fontSize","decimals","value","getBalanceNumber","times","unit","prefix","disabled","some","item","pathname","includes","mr","HarvestAction","earnings","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","onReward","useHarvestFarm","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","console","error","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","lpContract","useERC20","onApprove","useApproveFarm","handleApprove","textTransform","pr","lpSymbol","mt","UnlockButton","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","props","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","displayApr","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","replace","earnLabel","dual","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","address","tokenAddress","BASE_ADD_LIQUIDITY_URL","isCommunity","style","display","apr","ApyButton","fee","CardActionsContainer","getBscScanAddressUrl","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","scale","as","Link","to","show","mediaQueries","sm","Container","ToggleView","viewMode","onToggle","handleToggle","mode","id","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","Text","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","data","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","isActive","usePollFarmsData","userDataReady","stakedOnly","setStakedOnly","useEffect","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","toLowerCase","loadMoreRef","useRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","useMemo","farmsStaked","farms","orderBy","Number","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","current","rowData","originalValue","label","earned","details","className","exact","activeClassName","Page","checked","onChange","length","Select","options","option","marginLeft","SearchInput","event","target","placeholder","columns","DesktopColumnSchema","column","name","sort","b","original","sortable","renderContent","ref","src","alt"],"mappings":"2YAUMA,EAAUC,IAAOC,IAAV,sJAOD,qBAAGC,MAAkBC,OAAOC,WAIlCC,EAAkE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC1EC,EAAMC,cAAND,EAER,OACE,eAACT,EAAD,CAASW,aAAYF,EAAE,mCAAoCG,KAAK,SAASL,QAAS,kBAAMA,KAAxF,UACE,cAAC,KAAD,CAAMM,MAAM,UAAUC,MAAI,EAA1B,SACcL,EAAXD,EAAa,OAAY,aAE3BA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCF,EAAwBS,aAAe,CACrCP,UAAU,GAGGF,I,sCAAAA,I,0BCxBTN,GAAUC,IAAOC,IAAV,iDAIPc,GAAqBf,YAAOgB,KAAPhB,CAAH,iDA6BTiB,GAzB0C,SAAC,GAOnD,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,QACAC,EACI,EADJA,gBAEQf,EAAMC,cAAND,EAER,OACE,eAAC,GAAD,WACE,eAAC,IAAD,CAAMgB,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOhB,EAAE,mBAAT,OACCa,EAAsB,cAAC,KAAD,UAAOA,IAA8B,cAAC,KAAD,CAAUI,MAAO,GAAIC,OAAQ,SAEzFN,GACA,cAACL,GAAD,CAAoBY,KAAMJ,EAA1B,SAA4Cf,EAAE,eAAgB,CAAEoB,OAAQN,MAE1E,cAACP,GAAD,CAAoBY,KAAMT,EAA1B,SAA2CV,EAAE,mBAC7C,cAACO,GAAD,CAAoBY,KAAMR,EAA1B,SAAwCX,EAAE,uB,oBC3B1CT,GAAUC,YAAO6B,IAAP7B,CAAH,kEAMP8B,GAAgB9B,YAAO+B,KAAP/B,CAAH,iDAmBJgC,GAfuC,SAAC,GAAiE,IAA/DV,EAA8D,EAA9DA,QAASW,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACpG,OACE,eAAC,GAAD,CAASZ,eAAe,gBAAgBa,WAAW,SAASC,GAAG,OAA/D,UACE,cAACC,GAAA,EAAD,CAAgBC,QAAQ,WAAWC,aAAcN,EAAOO,eAAgBN,EAAYX,MAAO,GAAIC,OAAQ,KACvG,eAAC,IAAD,CAAMiB,cAAc,SAASN,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBhB,EAAQsB,MAAM,KAAK,KACtC,eAAC,IAAD,CAAMpB,eAAe,SAArB,UACGU,EAAkB,cAAC,KAAD,IAAmB,cAAC,KAAD,IACtC,cAACJ,GAAD,CAAeU,QAAQ,YAAvB,SAAoCP,c,kHCRxCY,GAAoB7C,IAAOC,IAAV,8EA2FR6C,GApFqC,SAAC,GAM9C,IALLC,EAKI,EALJA,cACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,IACA3B,EACI,EADJA,gBAEQf,EAAMC,cAAND,EACA2C,EAAYC,aAAcF,GAA1BC,QACAE,EAAcC,aAAgBJ,GAA9BG,UACFE,EAAWC,cACXC,EAAWC,eACTC,EAAYC,cAAZD,QACFE,EAAUC,YAAgBb,GAE1Bc,EAAW,yCAAG,WAAOC,GAAP,UAAAC,EAAA,sEACZd,EAAQa,GADI,OAElBP,EAASS,aAAuB,CAAEP,UAASQ,KAAM,CAACjB,MAFhC,2CAAH,sDAKXkB,EAAa,yCAAG,WAAOJ,GAAP,UAAAC,EAAA,sEACdZ,EAAUW,GADI,OAEpBP,EAASS,aAAuB,CAAEP,UAASQ,KAAM,CAACjB,MAF9B,2CAAH,sDAKbmB,EAAiBC,uBAAY,WACjC,IAAMC,EAAyBC,YAAiBzB,GAChD,OAAIwB,EAAuBE,GAAG,IAAMF,EAAuBG,GAAG,MACrDC,YAAsB5B,GAAe6B,iBAEvCL,EAAuBM,QAAQ,EAAGC,IAAUC,cAClD,CAAChC,IAEJ,EAA2BiC,aACzB,cAACC,GAAA,EAAD,CAAcC,IAAKlC,EAAcmC,UAAWpB,EAAad,UAAWA,EAAW1B,gBAAiBA,KAD3F6D,EAAP,oBAGA,EAA4BJ,aAC1B,cAACK,GAAA,EAAD,CAAeH,IAAKnC,EAAeoC,UAAWf,EAAenB,UAAWA,KADnEqC,EAAP,oBA4BA,OACE,eAAC,IAAD,CAAM9D,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,IAAD,CAAMM,cAAc,SAASN,WAAW,aAAxC,UACE,cAAC,IAAD,CAASzB,MAAOmC,EAAcwC,GAAG,GAAK,eAAiB,OAAvD,SAAgElB,MAC/DtB,EAAc0B,GAAG,IAAMZ,EAAQY,GAAG,IACjC,cAACe,GAAA,EAAD,CACEC,SAAS,OACT7E,MAAM,aACN8E,SAAU,EACVC,MAAOC,YAAiB/B,EAAQgC,MAAM9C,IACtC+C,KAAK,OACLC,OAAO,SAlCRhD,EAAcwC,GAAG,GACtB,cAAC,IAAD,CACEjF,QAAS8E,EACTY,SAAU,CAAC,UAAW,YAAYC,MAAK,SAACC,GAAD,OAAU3C,EAAS4C,SAASC,SAASF,MAF9E,SAIG1F,EAAE,cAGL,eAACqC,GAAD,WACE,cAAC,IAAD,CAAYL,QAAQ,WAAWlC,QAASgF,EAAmBe,GAAG,MAA9D,SACE,cAAC,KAAD,CAAWzF,MAAM,UAAUa,MAAM,WAEnC,cAAC,IAAD,CACEe,QAAQ,WACRlC,QAAS8E,EACTY,SAAU,CAAC,UAAW,YAAYC,MAAK,SAACC,GAAD,OAAU3C,EAAS4C,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAAStF,MAAM,UAAUa,MAAM,kB,4BCvB1B6E,GAhDuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUrD,EAAU,EAAVA,IACzDS,EAAYC,cAAZD,QACR,EAAqC6C,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACdlG,EAAMC,cAAND,EACR,EAAkCmG,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACQC,EAAaC,aAAe7D,GAA5B4D,SACFE,EAAYC,cACZxD,EAAWC,eACXwD,EAAqBvD,EAAUa,YAAiB+B,GAAYY,KAC5D9C,EAAiB6C,EAAmBrC,QAAQ,EAAGC,IAAUC,YACzDqC,EAAeF,EAAqBA,EAAmBG,aAAaL,GAAWM,WAAa,EAElG,OACE,eAAC,IAAD,CAAMhF,GAAG,MAAMd,eAAe,gBAAgBa,WAAW,SAAzD,UACE,eAAC,IAAD,CAAMM,cAAc,SAASN,WAAW,aAAxC,UACE,cAAC,IAAD,CAASzB,MAAOsG,EAAmB3B,GAAG,GAAK,eAAiB,OAA5D,SAAqElB,IACpE+C,EAAe,GACd,cAAC5B,GAAA,EAAD,CAASC,SAAS,OAAO7E,MAAM,aAAa8E,SAAU,EAAGC,MAAOyB,EAActB,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACEC,SAAUkB,EAAmB3B,GAAG,IAAMqB,EACtCtG,QAAO,wBAAE,uBAAA2D,EAAA,6DACP4C,GAAa,GADN,kBAGCC,IAHD,OAILL,EAAa,GAAD,OACPjG,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEoB,OAAQ,UANlE,gDASL8E,EACElG,EAAE,SACFA,EAAE,uFAEJ+G,QAAQC,MAAR,MAbK,yBAeLX,GAAa,GAfR,qBAiBPpD,EAASS,aAAuB,CAAEP,UAASQ,KAAM,CAACjB,MAjB3C,+DAFX,SAsBG1C,EAAE,iB,UC9CLiH,GAASzH,IAAOC,IAAV,kDAsFGyH,GAzEqC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMhE,EAA+B,EAA/BA,QAASpC,EAAsB,EAAtBA,gBAC5Df,EAAMC,cAAND,EACR,EAAkDmG,oBAAS,GAA3D,mBAAOiB,EAAP,KAA0BC,EAA1B,KACQ3E,EAAqByE,EAArBzE,IAAK4E,EAAgBH,EAAhBG,YACb,EAKIH,EAAKI,UAAY,GALrB,IACEC,UAAWC,OADb,MACiC,EADjC,MAEEjF,aAAckF,OAFhB,MAEuC,EAFvC,MAGEnF,cAAeoF,OAHjB,MAGyC,EAHzC,MAIE5B,SAAU6B,OAJZ,MAI+B,EAJ/B,EAMMJ,EAAY,IAAIlD,IAAUmD,GAC1BjF,EAAe,IAAI8B,IAAUoD,GAC7BnF,EAAgB,IAAI+B,IAAUqD,GAC9B5B,EAAW,IAAIzB,IAAUsD,GACzBC,EAAYC,YAAWR,GACvBS,EAAa5E,GAAWqE,GAAaA,EAAUQ,cAAc,GAC7D/E,EAAWC,eAEX+E,EAAaC,aAASL,GAEpBM,EAAcC,aAAeH,GAA7BE,UAEFE,EAAgBvE,sBAAW,wBAAC,uBAAAL,EAAA,sEAE9B4D,GAAqB,GAFS,SAGxBc,IAHwB,OAI9BlF,EAASS,aAAuB,CAAEP,UAASQ,KAAM,CAACjB,MAClD2E,GAAqB,GALS,gDAO9BN,QAAQC,MAAR,MAP8B,yDAS/B,CAACmB,EAAWlF,EAAUE,EAAST,IAkBlC,OACE,eAACuE,GAAD,WACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAM5G,MAAI,EAACiI,cAAc,YAAYlI,MAAM,YAAY6E,SAAS,OAAOsD,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAMlI,MAAI,EAACiI,cAAc,YAAYlI,MAAM,aAAa6E,SAAS,OAAjE,SACGjF,EAAE,eAGP,cAAC,GAAD,CAAe+F,SAAUA,EAAUrD,IAAKA,IACxC,eAAC,IAAD,WACE,cAAC,KAAD,CAAMrC,MAAI,EAACiI,cAAc,YAAYlI,MAAM,YAAY6E,SAAS,OAAOsD,GAAG,MAA1E,SACGpB,EAAKqB,WAER,cAAC,KAAD,CAAMnI,MAAI,EAACiI,cAAc,YAAYlI,MAAM,aAAa6E,SAAS,OAAjE,SACGjF,EAAE,eAGLmD,EAlCG4E,EACL,cAAC,GAAD,CACExF,cAAeA,EACfC,aAAcA,EACdC,UAAW0E,EAAKqB,SAChB9F,IAAKA,EACL3B,gBAAiBA,IAGnB,cAAC,IAAD,CAAQ0H,GAAG,MAAMxH,MAAM,OAAOuE,SAAU4B,EAAmBtH,QAASuI,EAApE,SACGrI,EAAE,sBAwBO,cAAC0I,GAAA,EAAD,CAAcD,GAAG,MAAMxH,MAAM,a,UCxEzC0H,GAAiBC,YAAH,gLAYdC,GAAmBrJ,IAAOC,IAAV,kPACN,gBAAGC,EAAH,EAAGA,MAAH,wCAA0CA,EAAMC,OAAOmJ,cAAvD,aAAyEpJ,EAAMC,OAAOoJ,UAAtF,OAEDJ,IAUTK,GAAQxJ,IAAOC,IAAV,kSAEK,SAACwJ,GAAD,OAAWA,EAAMvJ,MAAMwJ,KAAKC,cACzB,gBAAGzJ,EAAH,EAAGA,MAAH,SAAU0J,eAAuC,OAAS1J,EAAM2J,MAAMH,QAUnFI,GAAU9J,IAAOC,IAAV,4GACS,qBAAGC,MAAkBC,OAAO4J,cAM5CC,GAAmBhK,IAAOC,IAAV,iEACV,SAACwJ,GAAD,OAAYA,EAAMlJ,SAAW,OAAS,SA6FnC0J,GAjF2B,SAAC,GAAuD,IAArDtC,EAAoD,EAApDA,KAAMuC,EAA8C,EAA9CA,WAAY9I,EAAkC,EAAlCA,QAAS4F,EAAyB,EAAzBA,UAAWrD,EAAc,EAAdA,QAEzEnD,EAAMC,cAAND,EAER,EAA0DmG,oBAAS,GAAnE,mBAAOwD,EAAP,KAA8BC,EAA9B,KAEM/I,EACJsG,EAAK0C,WAAa1C,EAAK0C,UAAU5F,GAAG,GAApC,WACQkD,EAAK0C,UAAU/C,WAAW1C,oBAAe0F,EAAW,CAAEC,sBAAuB,KACjF,GAEAjJ,EAAUqG,EAAKqB,UAAYrB,EAAKqB,SAASwB,cAAcC,QAAQ,UAAW,IAC1EC,EAAY/C,EAAKgD,KAAOhD,EAAKgD,KAAKD,UAAYlK,EAAE,SAEhDoK,EAAwBC,aAAyB,CACrDC,kBAAmBnD,EAAKvF,WAAW2I,QACnCC,aAAcrD,EAAKxF,MAAM4I,UAErBxJ,EAAe,UAAM0J,IAAN,YAAgCL,GAC/CvC,EAAYC,YAAWX,EAAKG,aAC5B8B,EAAuC,SAAtBjC,EAAKxF,MAAMP,OAElC,OACE,eAAC4H,GAAD,CAAOI,eAAgBA,EAAvB,UACGA,GAAkB,cAACP,GAAD,IACnB,cAAC,GAAD,CACE/H,QAASA,EACTW,WAAY0F,EAAK1F,WACjBC,gBAAiByF,EAAKuD,YACtB/I,MAAOwF,EAAKxF,MACZC,WAAYuF,EAAKvF,cAEjBhB,GACA,eAAC,IAAD,CAAMI,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,KAAD,WAAO7B,EAAE,OAAT,OACA,cAAC,KAAD,CAAMK,MAAI,EAACsK,MAAO,CAAEC,QAAS,OAAQ/I,WAAY,UAAjD,SACGsF,EAAK0D,IACJ,qCACE,cAACC,GAAA,EAAD,CACEhK,QAASA,EACTC,gBAAiBA,EACjByF,UAAWA,EACXqE,IAAK1D,EAAK0D,IACVnB,WAAYA,IAEbA,EARH,OAWA,cAAC,KAAD,CAAUxI,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMD,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOhB,EAAE,QAAT,OACA,cAAC,KAAD,CAAMK,MAAI,EAAV,SAAY6J,OAEd,eAAC,IAAD,CAAMlJ,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOhB,EAAE,QAAT,OACA,eAAC,KAAD,CAAMK,MAAI,EAAV,iBAAY8G,QAAZ,IAAYA,OAAZ,EAAYA,EAAM4D,IAAlB,UAEF,cAACC,GAAD,CAAsB7D,KAAMA,EAAMhE,QAASA,EAASpC,gBAAiBA,IACrE,cAACuI,GAAD,IACA,cAAC,EAAD,CACExJ,QAAS,kBAAM8J,GAA0BD,IACzC5J,SAAU4J,IAEZ,cAACH,GAAD,CAAkBzJ,SAAU4J,EAA5B,SACE,cAAC,GAAD,CACE/I,QAASA,EACTF,eAAgBuK,YAAqBpD,GACrClH,YAAW,wCAAmCkH,GAC9ChH,oBAAqBA,EACrBC,QAASA,EACTC,gBAAiBA,U,UC7GZmK,GArCuC,SAAC,GAAiC,IAKlFC,EALmDC,EAA8B,EAA9BA,wBAC/CC,EAAQC,cAARD,IACFtI,EAAWC,cACThD,EAAMC,cAAND,EAGR,OAAQ+C,EAAS4C,UACf,IAAK,SACHwF,EAAc,EACd,MACF,IAAK,iBACHA,EAAc,EACd,MACF,IAAK,kBACHA,EAAc,EACd,MACF,QACEA,EAAc,EAIlB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAYA,YAAaA,EAAaI,MAAM,KAAKvJ,QAAQ,SAAzD,UACE,cAAC,IAAD,CAAgBwJ,GAAIC,IAAMC,GAAE,UAAKL,GAAjC,SACGrL,EAAE,UAEL,cAAC,KAAD,CAAiB2L,KAAMP,EAAvB,SACE,cAAC,IAAD,CAAgBI,GAAIC,IAAMC,GAAE,UAAKL,EAAL,YAA5B,SACGrL,EAAE,sBAUTT,GAAUC,IAAOC,IAAV,2MAUT,qBAAGC,MAAkBkM,aAAaC,M,UCjDhCC,GAAYtM,IAAOC,IAAV,uFAGX,qBAAGC,MAAkBkM,aAAaC,MAwBvBE,GAnB8C,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAClEC,EAAe,SAACC,GAChBH,IAAaG,GACfF,EAASE,IAIb,OACE,eAACL,GAAD,WACE,cAAC,IAAD,CAAY9J,QAAQ,OAAOuJ,MAAM,KAAKa,GAAG,oBAAoBtM,QAAS,kBAAMoM,EAAaG,KAASC,OAAlG,SACE,cAAC,IAAD,CAAclM,MAAO4L,IAAaK,KAASC,KAAO,UAAY,mBAEhE,cAAC,IAAD,CAAYtK,QAAQ,OAAOuJ,MAAM,KAAKa,GAAG,qBAAqBtM,QAAS,kBAAMoM,EAAaG,KAASE,QAAnG,SACE,cAAC,KAAD,CAAcnM,MAAO4L,IAAaK,KAASE,MAAQ,UAAY,uBCHjEC,GAAmBhN,IAAOC,IAAV,qTAUlB,qBAAGC,MAAkBkM,aAAaC,MAQhCY,GAAgBjN,IAAOC,IAAV,kIAKfiN,MAKEC,GAAenN,IAAOC,IAAV,iEACZiN,MAKAE,GAAkBpN,IAAOC,IAAV,8JAMjB,qBAAGC,MAAkBkM,aAAaC,MAMhCgB,GAAerN,IAAOC,IAAV,mSAWd,qBAAGC,MAAkBkM,aAAaC,MAUhCiB,GAActN,YAAOuN,IAAPvN,CAAH,8FAOXwN,GAAgB,SAACC,EAAyBC,GAC9C,OAAID,GAAkBC,GACZD,EAAiBC,GAAc9I,eAAe,QAAS,CAAE2F,sBAAuB,IAEtFkD,EACKA,EAAe7I,eAAe,QAAS,CAAE2F,sBAAuB,IAElE,MAsVMoD,GAnVS,WACtB,IAAQC,EAAS9B,cAAT8B,KACAzH,EAAa3C,cAAb2C,SACA3F,EAAMC,cAAND,EACR,EAA0CqN,cAA5BC,EAAd,EAAQC,KAAeC,EAAvB,EAAuBA,eACjBhH,EAAYC,cAClB,EAA0BN,mBAAS,IAAnC,mBAAOsH,EAAP,KAAcC,EAAd,KACA,EAAgCC,YAAgBtB,KAASE,MAAO,CAAEqB,gBAAiB,sBAAnF,mBAAO5B,EAAP,KAAiB6B,EAAjB,KACQ1K,EAAYC,cAAZD,QACR,EAAoCgD,mBAAS,OAA7C,mBAAO2H,EAAP,KAAmBC,EAAnB,KAEMC,EAAarI,EAASC,SAAS,YAC/BqI,EAAatI,EAASC,SAAS,WAC/BsI,GAAYD,IAAeD,EAEjCG,YAAiBH,GAIjB,IAAMI,GAAiBjL,KAAcA,GAAWqK,EAEhD,EAAoCrH,oBAAU+H,GAA9C,mBAAOG,EAAP,KAAmBC,EAAnB,KACAC,qBAAU,WACRD,GAAeJ,KACd,CAACA,IAEJ,IAAMM,EAAclB,EAAQmB,QAAO,SAACtH,GAAD,OAAuB,IAAbA,EAAKzE,KAAiC,OAApByE,EAAK1F,aAAwBiN,YAAcvH,EAAKzE,QACzGiM,EAAgBrB,EAAQmB,QAAO,SAACtH,GAAD,OAAuB,IAAbA,EAAKzE,KAAiC,OAApByE,EAAK1F,aAAwBiN,YAAcvH,EAAKzE,QAC3GkM,EAAgBtB,EAAQmB,QAAO,SAACtH,GAAD,OAAUuH,YAAcvH,EAAKzE,QAE5DmM,EAAkBL,EAAYC,QAClC,SAACtH,GAAD,OAAUA,EAAKI,UAAY,IAAIjD,IAAU6C,EAAKI,SAAShF,eAAeyF,cAAc,MAGhF8G,GAAsBH,EAAcF,QACxC,SAACtH,GAAD,OAAUA,EAAKI,UAAY,IAAIjD,IAAU6C,EAAKI,SAAShF,eAAeyF,cAAc,MAGhF+G,GAAsBH,EAAcH,QACxC,SAACtH,GAAD,OAAUA,EAAKI,UAAY,IAAIjD,IAAU6C,EAAKI,SAAShF,eAAeyF,cAAc,MAGhFgH,GAAYlL,uBAChB,SAACmL,GACC,IAAIC,EAA+CD,EAAeE,KAAI,SAAChI,GACrE,IAAKA,EAAKiI,sBAAwBjI,EAAKvF,WAAWyN,UAChD,OAAOlI,EAET,IAAMmI,EAAiB,IAAIhL,IAAU6C,EAAKiI,qBAAqB/J,MAAM8B,EAAKvF,WAAWyN,WAErF,EAAyCnB,EACrCqB,YAAW,IAAIjL,IAAU6C,EAAKqI,YAAahJ,EAAW8I,EAAgBnI,EAAKG,YAAYmI,IAAQC,UAC/F,CAAEzC,eAAgB,EAAGC,aAAc,GAF/BD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aAIxB,OAAO,2BAAK/F,GAAZ,IAAkB0D,IAAKoC,EAAgBC,eAAcrD,UAAWyF,OAGlE,GAAI7B,EAAO,CACT,IAAMkC,EAAiBC,YAASnC,EAAMoC,eACtCX,EAAwBA,EAAsBT,QAAO,SAACtH,GACpD,OAAOyI,YAASzI,EAAKqB,SAASqH,eAAejK,SAAS+J,MAG1D,OAAOT,IAET,CAAC1I,EAAWiH,EAAOS,IAOf4B,GAAcC,iBAAuB,MAE3C,GAAwD5J,mBAtF1B,IAsF9B,qBAAO6J,GAAP,MAA6BC,GAA7B,MACA,GAA0C9J,oBAAS,GAAnD,qBAAO+J,GAAP,MAAsBC,GAAtB,MAEMC,GAAsBC,mBAAQ,WAClC,IAAIC,EAAc,GAmClB,OAVIpC,IACFoC,EAA2BtB,GAAbX,EAAuBQ,EAA6BL,IAEhEP,IACFqC,EAA2BtB,GAAbX,EAAuBS,GAAiCH,IAEpEX,IACFsC,EAA2BtB,GAAbX,EAAuBU,GAAiCH,IA9BtD,SAAC2B,GACjB,OAAQzC,GACN,IAAK,MACH,OAAO0C,kBAAQD,GAAO,SAACpJ,GAAD,OAA+BA,EAAK0D,IAAM1D,EAAK+F,eAAc,QACrF,IAAK,aACH,OAAOsD,kBACLD,GACA,SAACpJ,GAAD,OAAgCA,EAAK1F,WAAagP,OAAOtJ,EAAK1F,WAAWiP,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOF,kBACLD,GACA,SAACpJ,GAAD,OAAgCA,EAAKI,SAAWkJ,OAAOtJ,EAAKI,SAASxB,UAAY,IACjF,QAEJ,IAAK,YACH,OAAOyK,kBAAQD,GAAO,SAACpJ,GAAD,OAA+BsJ,OAAOtJ,EAAK0C,aAAY,QAC/E,QACE,OAAO0G,GAcNI,CAAUL,GAAaI,MAAM,EAAGV,MACtC,CACDlC,EACAU,EACAQ,GACAL,EACAC,EACAV,EACAD,EACAD,EACAe,GACAD,GACAT,EACAQ,EACAmB,KAGFzB,qBAAU,WAQH2B,KACsB,IAAIU,sBART,SAACC,GACrB,YAAgBA,EAAhB,MACUC,gBACRb,IAAwB,SAACc,GAAD,OAA2BA,EAlJ3B,QAuJuC,CAC/DC,WAAY,MACZC,UAAW,IAEIC,QAAQpB,GAAYqB,SACrChB,IAAiB,MAElB,CAACC,GAAqBF,KAEzB,IAAMkB,GAAUhB,GAAoBjB,KAAI,SAAChI,GACvC,IAAQxF,EAAsBwF,EAAtBxF,MAAOC,EAAeuF,EAAfvF,WACT4I,EAAe7I,EAAM4I,QACrBD,EAAoB1I,EAAW2I,QAC/BzJ,EAAUqG,EAAKqB,UAAYrB,EAAKqB,SAASpG,MAAM,KAAK,GAAG4H,cAAcC,QAAQ,UAAW,IAmC9F,MAjCsB,CACpBY,IAAK,CACH1F,MAAO6H,GAAc7F,EAAK0D,IAAK1D,EAAK+F,cACpCzL,WAAY0F,EAAK1F,WACjBX,UACA0J,eACAF,oBACA9D,YACA6K,cAAelK,EAAK0D,KAEtB1D,KAAM,CACJmK,MAAOxQ,EACP4B,IAAKyE,EAAKzE,IACVf,MAAOwF,EAAKxF,MACZC,WAAYuF,EAAKvF,YAEnB2P,OAAQ,CACNxL,SAAUX,YAAiB,IAAId,IAAU6C,EAAKI,SAASxB,WACvDrD,IAAKyE,EAAKzE,KAEZmH,UAAW,CACTA,UAAW1C,EAAK0C,WAElBkB,IAAK,CACHA,IAAK5D,EAAK4D,KAEZtJ,WAAY,CACVA,WAAY0F,EAAK1F,YAEnB+P,QAASrK,MAqFb,OACE,mCACE,sBAAKsK,UAAU,SAAf,UACE,cAAC,IAAD,CAASjG,GAAG,KAAKD,MAAM,MAAMkG,UAAU,aAAarR,MAAM,YAAY0B,GAAG,OAAzE,SACG9B,EAAE,WAEL,cAAC,IAAD,CAASuL,MAAM,KAAKnL,MAAM,OAAOqR,UAAU,WAA3C,SACGzR,EAAE,8BAEL,cAAC,IAAD,CAAS0R,OAAK,EAACC,gBAAgB,SAASjG,GAAG,iBAAiBU,GAAG,qBAAqBqF,UAAU,aAQhG,eAACG,EAAA,EAAD,CAAMH,UAAU,SAAhB,UACE,eAACjF,GAAD,WACE,eAACK,GAAD,WACE,cAAC,GAAD,CAAYb,SAAUA,EAAUC,SAAU,SAACE,GAAD,OAAoB0B,EAAY1B,MAC1E,eAACM,GAAD,WACE,cAAC,KAAD,CAAQoF,QAASxD,EAAYyD,SAAU,kBAAMxD,GAAeD,IAAa9C,MAAM,OAC/E,eAAC,KAAD,eAAQvL,EAAE,qBAEZ,cAAC,GAAD,CAAgBoL,wBAAyB0D,GAAoBiD,OAAS,OAExE,eAACnF,GAAD,WACE,eAACD,GAAD,WACE,cAAC,KAAD,CAAMrE,cAAc,YAApB,SAAiCtI,EAAE,aACnC,cAACgS,EAAA,EAAD,CACEC,QAAS,CACP,CACEX,MAAOtR,EAAE,OACTmF,MAAO,OAET,CACEmM,MAAOtR,EAAE,OACTmF,MAAO,OAET,CACEmM,MAAOtR,EAAE,cACTmF,MAAO,cAET,CACEmM,MAAOtR,EAAE,UACTmF,MAAO,UAET,CACEmM,MAAOtR,EAAE,aACTmF,MAAO,cAGX2M,SAzDiB,SAACI,GAC9BnE,EAAcmE,EAAO/M,aA2Db,eAACwH,GAAD,CAAchC,MAAO,CAAEwH,WAAY,IAAnC,UACE,cAAC,KAAD,CAAM7J,cAAc,YAApB,SAAiCtI,EAAE,YACnC,cAACoS,EAAA,EAAD,CAAaN,SAlQC,SAACO,GACzB3E,EAAS2E,EAAMC,OAAOnN,QAiQ8BoN,YAAY,0BAxI5C,WACpB,GAAIvG,IAAaK,KAASE,OAAS6E,GAAQW,OAAQ,CACjD,IAEMS,EAFeC,KAEQtD,KAAI,SAACuD,GAAD,MAAa,CAC5CtG,GAAIsG,EAAOtG,GACXuG,KAAMD,EAAOC,KACbrB,MAAOoB,EAAOpB,MACdsB,KAAM,SAACnP,EAAsBoP,GAC3B,OAAQH,EAAOC,MACb,IAAK,OACH,OAAOE,EAAEzG,GAAK3I,EAAE2I,GAClB,IAAK,MACH,OAAI3I,EAAEqP,SAASjI,IAAI1F,OAAS0N,EAAEC,SAASjI,IAAI1F,MAClCsL,OAAOhN,EAAEqP,SAASjI,IAAI1F,OAASsL,OAAOoC,EAAEC,SAASjI,IAAI1F,OAGvD,EACT,IAAK,SACH,OAAO1B,EAAEqP,SAASvB,OAAOxL,SAAW8M,EAAEC,SAASvB,OAAOxL,SACxD,QACE,OAAO,IAGbgN,SAAUL,EAAOK,aAGnB,OAAO,cAAC,KAAD,CAAOxF,KAAM6D,GAASoB,QAASA,EAASpE,cAAeA,IAGhE,OACE,8BACE,eAAC/M,EAAA,EAAD,WACE,cAAC,IAAD,CAAOqQ,OAAK,EAACtE,KAAI,UAAKA,GAAtB,SACGgD,GAAoBjB,KAAI,SAAChI,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNuC,WAAYsD,GAAc7F,EAAK0D,IAAK1D,EAAK+F,cACzC1G,UAAWA,EACXrD,QAASA,EACTvC,SAAS,GALJuG,EAAKzE,UAShB,cAAC,IAAD,CAAOgP,OAAK,EAACtE,KAAI,UAAKA,EAAL,YAAjB,SACGgD,GAAoBjB,KAAI,SAAChI,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNuC,WAAYsD,GAAc7F,EAAK0D,IAAK1D,EAAK+F,cACzC1G,UAAWA,EACXrD,QAASA,EACTvC,SAAO,GALFuG,EAAKzE,UAShB,cAAC,IAAD,CAAOgP,OAAK,EAACtE,KAAI,UAAKA,EAAL,aAAjB,SACGgD,GAAoBjB,KAAI,SAAChI,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNuC,WAAYsD,GAAc7F,EAAK0D,IAAK1D,EAAK+F,cACzC1G,UAAWA,EACXrD,QAASA,EACTvC,SAAO,GALFuG,EAAKzE,eAgFjBsQ,GACD,qBAAKC,IAAKnD,KACV,cAAChD,GAAD,CAAaoG,IAAI,gCAAgCC,IAAI,uBAAuBlS,MAAO,IAAKC,OAAQ","file":"static/js/22.1a08eb60.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier }</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'FARM' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          FARM\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n  fee?: any\r\n}\r\n\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('FARM ')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'FARM'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n                {displayApr}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Fees')}:</Text>\r\n        <Text bold>{farm?.fee}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(lpAddress)}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        // console.log(\"totalLiquidity\",totalLiquidity)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms, \r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      fee: {\r\n        fee: farm.fee,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"backbg\">\r\n        <Heading as=\"h1\" scale=\"xxl\" className=\"head-light\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\" className=\"headtopa\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\" className=\"headtopa\">\r\n          {/* <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button> */}\r\n        </NavLink>\r\n      <Page className=\"backbg\">\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={460} height={103} />\r\n      </Page>\r\n</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}