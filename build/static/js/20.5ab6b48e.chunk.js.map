{"version":3,"sources":["hooks/useTokenBalance.ts","views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["FetchStatus","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getCakeContract","supply","BigNumber","toString","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","balance","setBalance","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev","HistoryTabs","useGetLatestOraclePrice","ethers","from","price","setPrice","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","LIVE","liveAndCurrent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","handleClick","claim","tx","wait","receipt","transactionHash","href","getBscScanTransactionUrl","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toFormat","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","getPayoutv2","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useGetRewardRate","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","markBetHistoryAsCollected","betId","getHeaderText","getHeaderIcon","claimedHash","getResultColor","toNumber","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","RoundResultHistory","getBscScanBlockNumberUrl","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","store","getState","predictions","reduce","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","getBscScanAddressUrl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","whiteSpace","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","useGetIsClaimable","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","initialBlock","useBlock","useGetBetByEpoch","formattedPayout","toUnsafeFloat","hasRoundFailed","oracleCalled","getHasRoundFailed","BlockProgress","rawProgress","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","estimatedEndBlockPlusPadding","BLOCK_PADDING","priceAsNumber","useCountUp","start","end","duration","decimals","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","parseUnits","dust","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","useMemo","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","minBetAmountBalance","lte","key","lt","getButtonProps","handleEnterPosition","betMethod","inputAmount","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","useGetIntervalBlocks","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","useBlockCountdown","secondsRemaining","setSecondsRemaining","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedbearMultiplier","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","localStorageKey","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","INITIAL","PageLoader"],"mappings":"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","file":"static/js/20.5ab6b48e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const contract = getChainlinkOracleContract()\r\n      const response = await contract.latestAnswer()\r\n      setPrice(response)\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status === PredictionStatus.LIVE) {\r\n      timer.current = setInterval(async () => {\r\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\r\n\r\n        dispatch(fetchRounds(liveAndCurrent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/hooks'\r\nimport { fetchClaimableStatuses } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Convert payout to number for compatibility\r\n  const payoutAsFloat = parseFloat(payout)\r\n  const betAmountAsFloat = parseFloat(betAmount)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await predictionsContract.claim(epoch)\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <Box>\r\n          <Text as=\"p\" mb=\"8px\">\r\n            {t('Your prizes have been sent to your wallet')}\r\n          </Text>\r\n          {receipt.transactionHash && (\r\n            <LinkExternal href={getBscScanTransactionUrl(receipt.transactionHash)}>{t('View on BscScan')}</LinkExternal>\r\n          )}\r\n        </Box>,\r\n      )\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${betAmount} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Your winnings')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${payout} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await predictionsContract.claim(epoch)\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'))\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import { ethers } from 'ethers'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\r\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\r\n  const value = bnb || ethers.BigNumber.from(0)\r\n  return formatBigNumberToFixed(value, 4)\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, blockNumber: number) => {\r\n  if (!round.endBlock) {\r\n    return false\r\n  }\r\n\r\n  return blockNumber > round.endBlock && round.oracleCalled === false\r\n}\r\n\r\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const { bullAmount, bearAmount, rewardAmount } = round\r\n  const { amount, position } = ledger\r\n\r\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\r\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return amountFixed.mulUnsafe(multiplier)\r\n}\r\n\r\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const payout = getPayoutv2(ledger, round)\r\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\r\n\r\n  return payout.subUnsafe(amount)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, NodeRound, Round } from 'state/types'\r\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\r\nimport { formatBnb, formatUsd } from '../History/helpers'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: NodeRound['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnbv2(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: NodeRound['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.cardBorder\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n\r\n/**\r\n * TODO: Remove\r\n *\r\n * This is a temporary function until we consolidate the data coming from the graph versus the node\r\n */\r\ninterface PrizePoolHistoryRowProps extends FlexProps {\r\n  totalAmount: number\r\n}\r\n\r\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceHistoryRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n/**\r\n * END TEMPORARY COMPONENTS\r\n */\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: NodeRound\r\n  hasFailed?: boolean\r\n}\r\n\r\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!closePrice) {\r\n    return null\r\n  }\r\n\r\n  if (closePrice.eq(lockPrice)) {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = getBetPosition(closePrice, lockPrice)\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {hasFailed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {closePrice ? (\r\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n              {formatUsdv2(closePrice)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"34px\" my=\"1px\" />\r\n          )}\r\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\r\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const canClaim = await predictionsContract.claimable(epoch, account)\r\n\r\n      if (canClaim) {\r\n        const refundable = await predictionsContract.refundable(epoch, account)\r\n        setIsRefundable(refundable)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetRewardRate, usePriceBnbBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst Divider = styled.hr`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n  const rewardRate = useGetRewardRate()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  const isWinner = result === Result.WIN\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = isWinner ? getNetPayout(bet, rewardRate) : bet.amount\r\n  const returned = payout + bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton\r\n            payout={formatBnb(payout)}\r\n            betAmount={bet.amount.toString()}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={!canClaim}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanTransactionUrl(bet.claimedHash)} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}:</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        {isWinner && (\r\n          <>\r\n            <Divider />\r\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('Amount to collect')}:\r\n              </Text>\r\n              <Flex justifyContent=\"end\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\r\n                </span>\r\n              </Flex>\r\n              {tooltipVisible && tooltip}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\nimport { getMultiplier } from './helpers'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResultHistory round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResultHistory>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\r\n          {bet.round.endBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/hooks'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const rewardRate = useGetRewardRate()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton\r\n            hasClaimed={!canClaim}\r\n            epoch={bet.round.epoch}\r\n            payout={formatBnb(payout)}\r\n            onSuccess={handleSuccess}\r\n            betAmount={bet.amount.toString()}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Bet } from 'state/types'\r\nimport HistoricalBet from './HistoricalBet'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.id} bet={bet} />\r\n      ))}\r\n    </>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport store from 'state'\r\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  const state = store.getState()\r\n  const rewardRate = state.predictions.rewardRate / 100\r\n\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet, rewardRate)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.id, payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <UnlockButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled from 'styled-components'\r\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnbv2 } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: ethers.BigNumber\r\n}\r\n\r\nconst StyledEnteredTag = styled(Tag).attrs({\r\n  variant: 'secondary',\r\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\r\n})`\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: ethers.BigNumber\r\n  multiplier?: string\r\n  hasEntered?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import styled from 'styled-components'\r\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\r\n\r\nconst Card = styled(UIKitCard)`\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default Card\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  blockNumber: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  border-radius: 16px 16px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useGetIsClaimable } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  epoch: number\r\n  payout: string\r\n  betAmount: string\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  epoch,\r\n  payout,\r\n  betAmount,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isClaimable = useGetIsClaimable(epoch)\r\n\r\n  if (!isClaimable) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch, startBlock } = round\r\n  const estimatedEndBlock = startBlock + interval\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\r\nimport { useBlock, useGetBetByEpoch } from 'state/hooks'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { initialBlock } = useBlock()\r\n  const { epoch, endBlock, lockPrice, closePrice } = round\r\n\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const payout = getNetPayoutv2(ledger, round)\r\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\r\n  const hasRoundFailed = getHasRoundFailed(round, initialBlock)\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          blockNumber={endBlock}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n          />\r\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay\r\n        epoch={epoch}\r\n        payout={formattedPayout}\r\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\r\n        isBottom={hasEnteredDown}\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\nimport { useBlock } from 'state/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n","import React from 'react'\r\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useCountUp } from 'react-countup'\r\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { BLOCK_PADDING } from 'state/predictions'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useBlock, useGetLastOraclePrice } from 'state/hooks'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, endBlock, totalAmount } = round\r\n  const { currentBlock } = useBlock()\r\n  const price = useGetLastOraclePrice()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (currentBlock > estimatedEndBlockPlusPadding) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlockPlusPadding}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlockPlusPadding} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              <div ref={targetRef}>\r\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n                </TooltipText>\r\n              </div>\r\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                {formatUsdv2(priceDifference)}\r\n              </PositionTag>\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { BetPosition } from 'state/types'\r\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport PositionTag from '../PositionTag'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\nimport Card from './Card'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\r\n}\r\n\r\n// /!\\ TEMPORARY /!\\\r\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\r\n// TODO: Remove on beta-v2 smart contract release.\r\nconst gasPrice = parseUnits('6', 'gwei')\r\nconst dust = parseUnits('0.01', 18)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (\r\n  value: ethers.BigNumber,\r\n  bnbBalance: ethers.BigNumber,\r\n  minBetAmountBalance: ethers.BigNumber,\r\n) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0)) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst getValueAsEthersBn = (value: string) => {\r\n  const valueAsFloat = parseFloat(value)\r\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  // Convert bnb balance to ethers.BigNumber\r\n  const bnbBalanceAsBn = useMemo(() => {\r\n    return ethers.BigNumber.from(bnbBalance.toString())\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\r\n  }, [bnbBalanceAsBn])\r\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\r\n\r\n  const valueAsBn = getValueAsEthersBn(value)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const handleInputChange = (input: string) => {\r\n    const inputAsBn = getValueAsEthersBn(input)\r\n\r\n    if (inputAsBn.eq(0)) {\r\n      setPercent(0)\r\n    } else {\r\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\r\n      const percentageAsFloat = percentage.toUnsafeFloat()\r\n\r\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\r\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\r\n      setValue(formatFixedNumber(balancePercentage))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\r\n\r\n  const handleEnterPosition = async () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n\r\n    try {\r\n      const tx = await predictionsContract[betMethod]({ value: valueAsBn.toString(), gasPrice })\r\n      setIsTxPending(true)\r\n      const receipt = await tx.wait()\r\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsTxPending(false)\r\n    }\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const inputAmount = getValueAsEthersBn(value)\r\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\r\n          step={0.01}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\r\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING)\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING)\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\r\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useRoundCountdown = (intervalsToAdd = 1) => {\r\n  const interval = useGetIntervalBlocks()\r\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\r\n  const blocksToAdd = intervalsToAdd * interval\r\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\r\n\r\n  return seconds\r\n}\r\n\r\nexport default useRoundCountdown\r\n","import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/hooks'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { getMultiplierv2 } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\r\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\r\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\r\n\r\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\r\n  const formattedbearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={ledger?.amount}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedbearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={ledger?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedbearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      betAmount={ledger?.amount}\r\n      bullMultiplier={formattedBullMultiplier}\r\n      bearMultiplier={formattedbearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useRoundCountdown from '../hooks/useRoundCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 70px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: 16px;\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const seconds = useRoundCountdown()\r\n  const countdown = formatRoundTime(seconds)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {seconds === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Card)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetSortedRounds } from 'state/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC = () => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const initialIndex = Math.floor(rounds.length / 2)\r\n\r\n  useOnNextRound()\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={initialIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.epoch}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\n\r\nenum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && (\r\n              <div>\r\n                <Positions />\r\n              </div>\r\n            )}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ChartDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\r\n        </Text>\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\r\n        </Text>\r\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n          {t('I understand')}\r\n        </Button>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          <LinkExternal\r\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n            external\r\n          >\r\n            {t('Learn More')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\n\r\nconst Predictions = () => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk',\r\n  })\r\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_chart',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const handleAcceptChart = () => setHasAcceptedChart(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedChart && isChartPaneOpen) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n"],"sourceRoot":""}