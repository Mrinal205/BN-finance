{"version":3,"sources":["components/PageHeader/PageHeader.tsx","views/Autofarm/components/ToggleView/ToggleView.tsx","views/Autofarm/components/PoolCard/AprRow.tsx","views/Autofarm/components/PoolCard/StyledCard.tsx","views/Autofarm/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Autofarm/components/PoolCard/CardFooter/index.tsx","views/Autofarm/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Autofarm/components/PoolCard/StyledCardHeader.tsx","views/Autofarm/hooks/useApprove.ts","views/Autofarm/components/PoolCard/CardActions/ApprovalAction.tsx","views/Autofarm/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Autofarm/components/PoolCard/Modals/PercentageButton.tsx","views/Autofarm/hooks/useStakePool.ts","views/Autofarm/hooks/useUnstakePool.ts","views/Autofarm/components/PoolCard/Modals/StakeModal.tsx","views/Autofarm/components/PoolCard/CardActions/StakeActions.tsx","views/Autofarm/hooks/useHarvestPool.ts","views/Autofarm/components/PoolCard/Modals/CollectModal.tsx","views/Autofarm/components/PoolCard/CardActions/HarvestActions.tsx","views/Autofarm/components/PoolCard/CardActions/index.tsx","views/Autofarm/components/PoolCard/index.tsx","views/Autofarm/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","views/Autofarm/helpers.tsx","views/Autofarm/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Autofarm/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Autofarm/components/CakeVaultCard/FeeSummary.tsx","views/Autofarm/components/CakeVaultCard/VaultStakeModal.tsx","views/Autofarm/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Autofarm/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Autofarm/components/CakeVaultCard/VaultCardActions/index.tsx","views/Autofarm/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Autofarm/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Autofarm/components/CakeVaultCard/index.tsx","views/Autofarm/components/PoolTabButtons.tsx","views/Autofarm/components/BountyModal.tsx","views/Autofarm/components/BountyCard.tsx","views/Autofarm/components/HelpButton.tsx","views/Autofarm/components/PoolsTable/Cells/BaseCell.tsx","views/Autofarm/components/PoolsTable/Cells/NameCell.tsx","views/Autofarm/components/PoolsTable/Cells/EarningsCell.tsx","views/Autofarm/components/PoolsTable/Apr.tsx","views/Autofarm/components/PoolsTable/Cells/AprCell.tsx","views/Autofarm/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Autofarm/components/PoolsTable/Cells/EndsInCell.tsx","views/Autofarm/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Autofarm/components/PoolsTable/ActionPanel/styles.ts","views/Autofarm/components/PoolsTable/ActionPanel/Harvest.tsx","views/Autofarm/components/PoolsTable/ActionPanel/Stake.tsx","views/Autofarm/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Autofarm/components/PoolsTable/PoolRow.tsx","views/Autofarm/components/PoolsTable/PoolsTable.tsx","views/Autofarm/index.tsx"],"names":["Outer","styled","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","ViewMode","AprRow","pool","performanceFee","t","useTranslation","stakingToken","earningToken","isFinished","apr","earningTokenPrice","isAutoVault","tooltipContent","useTooltip","placement","targetRef","tooltip","tooltipVisible","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","address","BASE_EXCHANGE_URL","getAddress","useModal","ApyCalculatorModal","tokenPrice","linkLabel","symbol","linkHref","earningTokenSymbol","onPresentApyModal","alignItems","justifyContent","ref","width","height","Balance","fontSize","isDisabled","value","decimals","unit","bold","onClick","variant","scale","color","PromotedGradient","keyframes","StyledCard","Card","isPromoted","css","primaryBright","secondary","card","isDesktop","mediaQueries","sm","StyledCardInner","radii","ExpandedWrapper","Flex","ExpandedFooter","account","currentBlock","useBlock","useCakeVault","totalCakeInVault","fees","totalStaked","startBlock","endBlock","stakingLimit","contractAddress","sousId","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","flexDirection","mb","small","gte","getBalanceNumber","manualCakeTotalMinusAutoVault","BigNumber","minus","getTotalStakedBalance","ml","mt","gt","getFullDisplayBalance","external","href","getBscScanBlockCountdownUrl","textTransform","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","Footer","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","CakeVaultTokenPairImage","primaryTokenSrc","tokens","cake","primarySrc","secondarySrc","Wrapper","CardHeader","backgroundDisabled","StyledCardHeader","isStaking","isCakePool","TokenPairImage","primaryToken","secondaryToken","useApprovePool","lpContract","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","useWeb3React","sousChefContract","useSousChef","handleApprove","useCallback","a","approve","ethers","constants","MaxUint256","tx","wait","receipt","updateUserAllowance","status","console","error","useVaultApprove","setLastUpdated","cakeVaultContract","useCakeVaultContract","cakeContract","useCake","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","useEffect","allowance","response","currentAllowance","toString","checkApprovalStatus","ApprovalAction","isLoading","stakingTokenContract","useERC20","endIcon","spin","disabled","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","headerBackground","cardHeader","as","StyledButton","Button","PercentageButton","mx","options","gasLimit","DEFAULT_GAS_LIMIT","sousStake","amount","deposit","times","BIG_TEN","pow","sousStakeBnb","DEFAULT_TOKEN_DECIMAL","useStakePool","isUsingBnb","masterChefContract","useMasterchef","handleStake","stakeFarm","updateUserStakedBalance","updateUserBalance","onStake","sousUnstake","withdraw","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","enableEmergencyWithdraw","handleUnstake","unstakeFarm","updateUserPendingReward","onUnstake","StakeModal","isBnbPool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","userData","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","usdValueStaked","formatNumber","toNumber","fullDecimalStakeAmount","getDecimalAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleConfirmClick","style","textAlign","token","minWidth","src","alt","onUserInput","input","convertedInput","percentage","Math","floor","min","currencyValue","isWarning","balance","max","onValueChanged","name","valueLabel","step","parseFloat","StakeAction","isStaked","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","reachStakingLimit","prefix","mr","harvestPool","harvestPoolBnb","BIG_ZERO","useHarvestPool","handleHarvest","harvestFarm","onReward","CollectModal","formattedBalance","fullBalance","earningsDollarValue","isCompoundPool","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","index","pb","HarvestActions","earnings","earningTokenBalance","earningTokenDollarBalance","hasEarnings","onPresentCollect","display","InlineText","Text","CardActions","harvest","poolCategory","PoolCategory","BINANCE","pendingReward","needsApproval","StakeActions","PoolCard","accountHasStakedBalance","ribbon","variantColor","text","UnlockButton","CardFooter","VaultApprovalAction","convertSharesToCake","shares","cakePerFullShare","decimalsToRound","sharePriceNumber","amountInCake","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","amountInShares","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","WithdrawalFeeTimer","secondsRemaining","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","lastDepositedTime","userShares","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","fee","useWithdrawalFeeTimer","parseInt","hasUnstakingFee","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","toFixed","callOptions","VaultStakeModal","stakingMax","pricePerFullShare","cakePriceBusd","usePriceCakeBusd","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","lte","withdrawAll","fetchCakeVaultUserData","handleDeposit","HasSharesActions","stakedDollarValue","VaultStakeActions","accountHasSharesStaked","CakeVaultCardActions","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","Date","toLocaleString","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","isXl","useMatchBreakpoints","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","div","ToggleView","viewMode","onToggle","handleToggle","mode","id","CARD","TABLE","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","setViewMode","useRouteMatch","url","isExact","isXs","isSm","viewModeToggle","liveOrFinishedSwitch","to","show","stakedOnlySwitch","checked","onChange","prev","Divider","BountyModal","TooltipComponent","estimatedCakeBountyReward","totalPendingCakeHarvest","callFee","callFeeAsDecimal","totalYieldToDisplay","estimatedDollarBountyReward","useMemo","hasFetchedDollarBounty","hasFetchedCakeBounty","dollarBountyToDisplay","cakeBountyToDisplay","tooltipPadding","right","BountyCard","fontWeight","onPresentBountyModal","ButtonText","xs","HelpButton","px","BaseCell","CellContent","StyledCell","NameCell","hasVaultShares","showStakedTag","subtitle","showSubtitle","toLocaleLowerCase","role","HelpIconWrapper","EarningsCell","userDataLoaded","labelText","asset","event","stopPropagation","undefined","Apr","showIcon","openRoiModal","padding","marginLeft","md","AprCell","TotalStakedCell","totalStakedBalance","EndsInCell","renderBlocks","flex","e","showLoading","ArrowIcon","ChevronDownIcon","toggled","isFullLayout","ActionContainer","xl","ActionTitles","ActionContent","HarvestAction","actionTitle","pt","alignSelf","lineHeight","marginTop","IconButtonWrapper","Staked","handlePoolApprove","requestedPoolApproval","handleVaultApprove","requestedVaultApproval","isNotVaultAndHasStake","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","onPresentVaultStake","onPresentVaultUnstake","expandAnimation","collapseAnimation","StyledActionPanel","dropdown","lg","InfoSection","ActionPanel","breakpoints","isMd","tagTargetRef","tagTooltip","tagTooltipVisible","maxStakeRow","blocksRow","aprRow","totalStakedRow","maxWidth","Harvest","Stake","StyledRow","PoolRow","isLg","setExpanded","shouldRenderActionPanel","useDelayedUnmount","ExpandActionCell","StyledTable","StyledTableBorder","cardBorder","ScrollButtonContainer","PoolsTable","pools","tableWrapperEl","useRef","map","current","scrollIntoView","behavior","CardLayout","FlexLayout","PoolControls","SearchSortContainer","ControlStretch","Autofarm","location","useLocation","usePools","poolsWithoutAutoVault","usePersistState","localStorageKey","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","searchQuery","setSearchQuery","sortOption","setSortOption","accountHasVaultShares","cakePool","find","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","isGreaterThan","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","sortPools","poolsToSort","orderBy","isHighValueToken","round","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","getRoi","amountEarned","amountInvested","autoCakeProfit","autoUsdProfit","poolsToShow","chosenPools","finalArray","lowercaseQuery","latinise","slice","forEach","cardLayout","tableLayout","className","Page","Select","label","option","SearchInput","target","placeholder"],"mappings":"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","file":"static/js/19.559be7c8.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-right: 0px;\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n    margin-right: 16px;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React from 'react'\r\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { Pool } from 'state/types'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { getAprData } from 'views/Pools/helpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface AprRowProps {\r\n  pool: Pool\r\n  performanceFee?: number\r\n}\r\n\r\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\r\n  const { t } = useTranslation()\r\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\r\n\r\n  const tooltipContent = isAutoVault\r\n    ? t('APY includes compounding, APR doesn’t. This pool’s FARM is compounded automatically, so we show APY.')\r\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink =\r\n    stakingToken.address && `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${getAddress(stakingToken.address)}`\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\r\n      {isFinished || !apr ? (\r\n        <Skeleton width=\"82px\" height=\"32px\" />\r\n      ) : (\r\n        <Flex alignItems=\"center\">\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n            bold\r\n          />\r\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AprRow\r\n","import styled, { css, keyframes } from 'styled-components'\r\nimport { Card, Box } from '@pancakeswap/uikit'\r\n\r\nconst PromotedGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\ninterface PromotedStyleCardProps {\r\n  isDesktop: boolean\r\n}\r\n\r\nexport const StyledCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\r\n  max-width: 352px;\r\n  margin: 0 8px 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: baseline;\r\n  position: relative;\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n\r\n  ${({ isPromoted, theme }) =>\r\n    isPromoted\r\n      ? css`\r\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\r\n          padding: 1px 1px 3px 1px;\r\n          background-size: 400% 400%;\r\n        `\r\n      : `background: ${(props) => props.theme.card.background};`}\r\n\r\n  ${({ isPromoted }) =>\r\n    isPromoted &&\r\n    isPromoted.isDesktop &&\r\n    css`\r\n      animation: ${PromotedGradient} 3s ease infinite;\r\n    `}\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin: 0 12px 46px;\r\n  }\r\n`\r\n\r\nexport const StyledCardInner = styled(Box)`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n`\r\n\r\nexport default StyledCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport {\r\n  Flex,\r\n  MetamaskIcon,\r\n  Text,\r\n  TooltipText,\r\n  LinkExternal,\r\n  TimerIcon,\r\n  Skeleton,\r\n  useTooltip,\r\n  Button,\r\n  Link,\r\n  HelpIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport Balance from 'components/Balance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\n\r\ninterface ExpandedFooterProps {\r\n  pool: Pool\r\n  account: string\r\n}\r\n\r\nconst ExpandedWrapper = styled(Flex)`\r\n  svg {\r\n    height: 14px;\r\n    width: 14px;\r\n  }\r\n`\r\n\r\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\r\n  const { t } = useTranslation()\r\n  const { currentBlock } = useBlock()\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const {\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    sousId,\r\n    isAutoVault,\r\n  } = pool\r\n\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <ExpandedWrapper flexDirection=\"column\">\r\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text small>{t('Total staked')}:</Text>\r\n        <Flex alignItems=\"flex-start\">\r\n          {totalStaked && totalStaked.gte(0) ? (\r\n            <>\r\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n              <span ref={totalStakedTargetRef}>\r\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <Skeleton width=\"90px\" height=\"21px\" />\r\n          )}\r\n          {totalStakedTooltipVisible && totalStakedTooltip}\r\n        </Flex>\r\n      </Flex>\r\n      {stakingLimit && stakingLimit.gt(0) && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\r\n          <Text small>{t('Max. stake per user')}:</Text>\r\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n        </Flex>\r\n      )}\r\n      {shouldShowBlockCountdown && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n          {blocksRemaining || blocksUntilStart ? (\r\n            <Flex alignItems=\"center\">\r\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n                  {t('Blocks')}\r\n                </Text>\r\n                <TimerIcon ml=\"4px\" color=\"primary\" />\r\n              </Link>\r\n            </Flex>\r\n          ) : (\r\n            <Skeleton width=\"54px\" height=\"21px\" />\r\n          )}\r\n        </Flex>\r\n      )}\r\n      {isAutoVault && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          {tooltipVisible && tooltip}\r\n          <TooltipText ref={targetRef} small>\r\n            {t('Performance Fee')}\r\n          </TooltipText>\r\n          <Flex alignItems=\"center\">\r\n            <Text ml=\"4px\" small>\r\n              {performanceFee / 100}%\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\r\n          {t('See Token Info')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\r\n          {t('View Project Site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      {poolContractAddress && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <LinkExternal\r\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n            bold={false}\r\n            small\r\n          >\r\n            {t('View Contract')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      )}\r\n      {account && isMetaMaskInScope && tokenAddress && (\r\n        <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n          >\r\n            <Text color=\"primary\" fontSize=\"14px\">\r\n              {t('Add to Metamask')}\r\n            </Text>\r\n            <MetamaskIcon ml=\"4px\" />\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </ExpandedWrapper>\r\n  )\r\n}\r\n\r\nexport default React.memo(ExpandedFooter)\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport ExpandedFooter from './ExpandedFooter'\r\n\r\ninterface FooterProps {\r\n  pool: Pool\r\n  account: string\r\n  totalCakeInVault?: BigNumber\r\n}\r\n\r\nconst ExpandableButtonWrapper = styled(Flex)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  button {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\r\n  const { isAutoVault } = pool\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <CardFooter>\r\n      <ExpandableButtonWrapper>\r\n        <Flex alignItems=\"center\">\r\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n          {tooltipVisible && tooltip}\r\n          <Flex ref={targetRef}>\r\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n          </Flex>\r\n        </Flex>\r\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n          {isExpanded ? t('Hide') : t('Details')}\r\n        </ExpandableLabel>\r\n      </ExpandableButtonWrapper>\r\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\r\n    </CardFooter>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\r\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\r\n\r\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\r\n}\r\n\r\nexport default CakeVaultTokenPairImage\r\n","import React from 'react'\r\nimport { CardHeader, Heading, Text, Flex } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\r\n\r\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\r\n  background: ${({ isFinished, background, theme }) =>\r\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\r\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\r\n`\r\n\r\nconst StyledCardHeader: React.FC<{\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  isAutoVault?: boolean\r\n  isFinished?: boolean\r\n  isStaking?: boolean\r\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\r\n  const { t } = useTranslation()\r\n  const isCakePool = earningToken.symbol === 'FARM' && stakingToken.symbol === 'FARM'\r\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\r\n\r\n  const getHeadingPrefix = () => {\r\n    if (isAutoVault) {\r\n      // vault\r\n      return t('Auto')\r\n    }\r\n    if (isCakePool) {\r\n      // manual cake\r\n      return t('Manual')\r\n    }\r\n    // all other pools\r\n    return t('Earn')\r\n  }\r\n\r\n  const getSubHeading = () => {\r\n    if (isAutoVault) {\r\n      return t('Automatic restaking')\r\n    }\r\n    if (isCakePool) {\r\n      return t('Earn FARM, stake FARM')\r\n    }\r\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\r\n  }\r\n\r\n  return (\r\n    <Wrapper isFinished={isFinished} background={background}>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex flexDirection=\"column\">\r\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\r\n            {`${getHeadingPrefix()} ${earningToken.symbol}`}\r\n          </Heading>\r\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <CakeVaultTokenPairImage width={64} height={64} />\r\n        ) : (\r\n          <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\r\n        )}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StyledCardHeader\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers, Contract } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\n\r\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256)\r\n      const receipt = await tx.wait()\r\n\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve FARM auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256)\r\n    setRequestedApproval(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'FARM' }))\r\n      setLastUpdated()\r\n      setRequestedApproval(false)\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setRequestedApproval(false)\r\n    }\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.allowance(account, cakeVaultContract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { Pool } from 'state/types'\r\nimport { useApprovePool } from '../../../hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  pool: Pool\r\n  isLoading?: boolean\r\n}\r\n\r\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\r\n  const { sousId, stakingToken, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove, requestedApproval } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ApprovalAction\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\ninterface NotEnoughTokensModalProps {\r\n  tokenSymbol: string\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Modal\r\n      title={t('%symbol% required', { symbol: tokenSymbol })}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Text color=\"failure\" bold>\r\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\r\n      </Text>\r\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\r\n      <Text>\r\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\r\n          symbol: tokenSymbol,\r\n        })}\r\n      </Text>\r\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\r\n        {t('Buy')} {tokenSymbol}\r\n      </Button>\r\n      <StyledLink href=\"https://yieldwatch.net\" external>\r\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\r\n          {t('Locate Assets')}\r\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\r\n        </Button>\r\n      </StyledLink>\r\n      <Button variant=\"text\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default NotEnoughTokensModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@pancakeswap/uikit'\r\n\r\ninterface PercentageButtonProps {\r\n  onClick: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\r\n  return (\r\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nexport default PercentageButton\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\r\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousStakeBnb = async (sousChefContract, amount) => {\r\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stakeFarm(masterChefContract, 0, amount)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakePool\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\r\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousEmergencyUnstake = async (sousChefContract) => {\r\n  const tx = await sousChefContract.emergencyWithdraw()\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await unstakeFarm(masterChefContract, 0, amount)\r\n      } else if (enableEmergencyWithdraw) {\r\n        await sousEmergencyUnstake(sousChefContract)\r\n      } else {\r\n        await sousUnstake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakePool\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\nimport useUnstakePool from '../../../hooks/useUnstakePool'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\r\n  }\r\n\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stakingLimit.gt(0) && !isRemovingStake && (\r\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n          {t('Max stake for this pool: %amount% %token%', {\r\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\r\n        isWarning={hasReachedStakeLimit}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      {hasReachedStakeLimit && (\r\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n          {t('Maximum total stake: %amount% %token%', {\r\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', {\r\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n        })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n      </Flex>\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <StyledLink external href={BASE_EXCHANGE_URL}>\r\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\r\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n          </Button>\r\n        </StyledLink>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../Modals/StakeModal'\r\n\r\ninterface StakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  isBnbPool: boolean\r\n  isStaked: ConstrainBoolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst StakeAction: React.FC<StakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakedBalance,\r\n  isBnbPool,\r\n  isStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  const renderStakeAction = () => {\r\n    return isStaked ? (\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <>\r\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\r\n            {stakingTokenPrice !== 0 && (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={stakedTokenDollarBalance}\r\n                  prefix=\"~\"\r\n                  unit=\" USD\"\r\n                />\r\n              </Text>\r\n            )}\r\n          </>\r\n        </Flex>\r\n        <Flex>\r\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n            <MinusIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n          {reachStakingLimit ? (\r\n            <span ref={targetRef}>\r\n              <IconButton variant=\"secondary\" disabled>\r\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n              </IconButton>\r\n            </span>\r\n          ) : (\r\n            <IconButton\r\n              variant=\"secondary\"\r\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\r\n              disabled={isFinished}\r\n            >\r\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n            </IconButton>\r\n          )}\r\n        </Flex>\r\n        {tooltipVisible && tooltip}\r\n      </Flex>\r\n    ) : (\r\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n        {t('Stake')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { DEFAULT_GAS_LIMIT } from 'config'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst harvestPool = async (sousChefContract) => {\r\n  const tx = await sousChefContract.deposit('0', options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst harvestPoolBnb = async (sousChefContract) => {\r\n  const tx = await sousChefContract.deposit({ ...options, value: BIG_ZERO })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvestFarm(masterChefContract, 0)\r\n    } else if (isUsingBnb) {\r\n      await harvestPoolBnb(sousChefContract)\r\n    } else {\r\n      await harvestPool(sousChefContract)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestPool\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Button,\r\n  Heading,\r\n  Flex,\r\n  AutoRenewIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  HelpIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { Token } from 'config/constants/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport useHarvestPool from '../../../hooks/useHarvestPool'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\n\r\ninterface CollectModalProps {\r\n  formattedBalance: string\r\n  fullBalance: string\r\n  earningToken: Token\r\n  earningsDollarValue: number\r\n  sousId: number\r\n  isBnbPool: boolean\r\n  isCompoundPool?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst CollectModal: React.FC<CollectModalProps> = ({\r\n  formattedBalance,\r\n  fullBalance,\r\n  earningToken,\r\n  earningsDollarValue,\r\n  sousId,\r\n  isBnbPool,\r\n  isCompoundPool = false,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { onReward } = useHarvestPool(sousId, isBnbPool)\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text mb=\"12px\">{t('Compound: collect and restake FARM into pool.')}</Text>\r\n      <Text>{t('Harvest: collect FARM and send to wallet')}</Text>\r\n    </>,\r\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // compounding\r\n    if (shouldCompound) {\r\n      try {\r\n        await onStake(fullBalance, earningToken.decimals)\r\n        toastSuccess(\r\n          `${t('Compounded')}!`,\r\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        console.error(e)\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // harvesting\r\n      try {\r\n        await onReward()\r\n        toastSuccess(\r\n          `${t('Harvested')}!`,\r\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        console.error(e)\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={`${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {isCompoundPool && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\r\n          <ButtonMenu\r\n            activeIndex={shouldCompound ? 0 : 1}\r\n            scale=\"sm\"\r\n            variant=\"subtle\"\r\n            onItemClick={(index) => setShouldCompound(!index)}\r\n          >\r\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\r\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\r\n          </ButtonMenu>\r\n          <Flex ml=\"10px\" ref={targetRef}>\r\n            <HelpIcon color=\"textSubtle\" />\r\n          </Flex>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n      )}\r\n\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\r\n        <Flex flexDirection=\"column\">\r\n          <Heading>\r\n            {formattedBalance} {earningToken.symbol}\r\n          </Heading>\r\n          {earningsDollarValue > 0 && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">{`~${formatNumber(earningsDollarValue)} USD`}</Text>\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <Button\r\n        mt=\"8px\"\r\n        onClick={handleHarvestConfirm}\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectModal\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Token } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport CollectModal from '../Modals/CollectModal'\r\n\r\ninterface HarvestActionsProps {\r\n  earnings: BigNumber\r\n  earningToken: Token\r\n  sousId: number\r\n  earningTokenPrice: number\r\n  isBnbPool: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\r\n  earnings,\r\n  earningToken,\r\n  sousId,\r\n  isBnbPool,\r\n  earningTokenPrice,\r\n  isLoading = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n\r\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const hasEarnings = earnings.toNumber() > 0\r\n  const isCompoundPool = sousId === 0\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isCompoundPool}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n      <Flex flexDirection=\"column\">\r\n        {isLoading ? (\r\n          <Skeleton width=\"80px\" height=\"48px\" />\r\n        ) : (\r\n          <>\r\n            {hasEarnings ? (\r\n              <>\r\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\r\n                {earningTokenPrice > 0 && (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color=\"textSubtle\"\r\n                    decimals={2}\r\n                    prefix=\"~\"\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                  />\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Heading color=\"textDisabled\">0</Heading>\r\n                <Text fontSize=\"12px\" color=\"textDisabled\">\r\n                  0 USD\r\n                </Text>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </Flex>\r\n      <Button disabled={!hasEarnings} onClick={onPresentCollect}>\r\n        {isCompoundPool ? t('Collect') : t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport ApprovalAction from './ApprovalAction'\r\nimport StakeActions from './StakeActions'\r\nimport HarvestActions from './HarvestActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\ninterface CardActionsProps {\r\n  pool: Pool\r\n  stakedBalance: BigNumber\r\n}\r\n\r\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\r\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice } = pool\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const { t } = useTranslation()\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  const needsApproval = !allowance.gt(0) && !isBnbPool\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isLoading = !userData\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        {harvest && (\r\n          <>\r\n            <Box display=\"inline\">\r\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                {`${earningToken.symbol} `}\r\n              </InlineText>\r\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                {t('Earned')}\r\n              </InlineText>\r\n            </Box>\r\n            <HarvestActions\r\n              earnings={earnings}\r\n              earningToken={earningToken}\r\n              sousId={sousId}\r\n              earningTokenPrice={earningTokenPrice}\r\n              isBnbPool={isBnbPool}\r\n              isLoading={isLoading}\r\n            />\r\n          </>\r\n        )}\r\n        <Box display=\"inline\">\r\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {needsApproval ? (\r\n          <ApprovalAction pool={pool} isLoading={isLoading} />\r\n        ) : (\r\n          <StakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            stakedBalance={stakedBalance}\r\n            isBnbPool={isBnbPool}\r\n            isStaked={isStaked}\r\n          />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from './AprRow'\r\nimport { StyledCard, StyledCardInner } from './StyledCard'\r\nimport CardFooter from './CardFooter'\r\nimport StyledCardHeader from './StyledCardHeader'\r\nimport CardActions from './CardActions'\r\n\r\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\r\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const accountHasStakedBalance = stakedBalance.gt(0)\r\n\r\n  return (\r\n    <StyledCard\r\n      isFinished={isFinished && sousId !== 0}\r\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\r\n    >\r\n      <StyledCardInner>\r\n        <StyledCardHeader\r\n          isStaking={accountHasStakedBalance}\r\n          earningToken={earningToken}\r\n          stakingToken={stakingToken}\r\n          isFinished={isFinished && sousId !== 0}\r\n        />\r\n        <CardBody>\r\n          <AprRow pool={pool} />\r\n          <Flex mt=\"24px\" flexDirection=\"column\">\r\n            {account ? (\r\n              <CardActions pool={pool} stakedBalance={stakedBalance} />\r\n            ) : (\r\n              <>\r\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                  {t('Start earning')}\r\n                </Text>\r\n                <UnlockButton />\r\n              </>\r\n            )}\r\n          </Flex>\r\n        </CardBody>\r\n        <CardFooter pool={pool} account={account} />\r\n      </StyledCardInner>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default PoolCard\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useVaultApprove } from '../../../hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  setLastUpdated: () => void\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VaultApprovalAction\r\n","import BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\r\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\r\n\r\nexport const getAprData = (pool: Pool, performanceFee: number) => {\r\n  const { isAutoVault, earningTokenPrice, apr } = pool\r\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\r\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\r\n  const roundingDecimals = isHighValueToken ? 4 : 2\r\n\r\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\r\n\r\n  if (isAutoVault) {\r\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\r\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n      numberOfDays: 365,\r\n      farmApr: apr,\r\n      tokenPrice: earningTokenPrice,\r\n      roundingDecimals,\r\n      compoundFrequency,\r\n      performanceFee,\r\n    })\r\n    const autoApr = getRoi({\r\n      amountEarned: tokenEarnedPerThousand365D,\r\n      amountInvested: oneThousandDollarsWorthOfToken,\r\n    })\r\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n  }\r\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n}\r\n\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\r\n}\r\n\r\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\r\n  const { startBlock, endBlock, isFinished } = pool\r\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n}\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\r\n  const { t } = useTranslation()\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\r\n}\r\n\r\nexport default WithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n//   // console.log('withdrawalFee:',withdrawalFee);\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text> \r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new FARM in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n        // // console.log('noFeeToPay:',noFeeToPay);\r\n      return t('Unstaking Fee').toLowerCase();\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n","import React from 'react'\r\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\n\r\ninterface FeeSummaryProps {\r\n  stakingTokenSymbol: string\r\n  stakeAmount: string\r\n}\r\n\r\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    fees: { withdrawalFee },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100\r\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new FARM in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'top-start' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        {tooltipVisible && tooltip}\r\n        <TooltipText ref={targetRef} small>\r\n          {t('Unstaking Fee')}\r\n        </TooltipText>\r\n        <Text fontSize=\"14px\">\r\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\r\n        </Text>\r\n      </Flex>\r\n      <UnstakingFeeCountdownRow />\r\n    </>\r\n  )\r\n} \r\n\r\nexport default FeeSummary\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst callOptions = {\r\n  gasLimit: 380000,\r\n}\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 FARM or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      try {\r\n        const tx = await cakeVaultContract.withdrawAll(callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      try {\r\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    try {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      handleWithdrawal(convertedStakeAmount)\r\n    } else {\r\n      // staking\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport { convertSharesToCake } from '../../../helpers'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\n\r\ninterface HasStakeActionProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n}\r\n\r\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { stakingToken } = pool\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0)\r\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\r\n    : 0\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\">\r\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {cakePriceBusd.gt(0) ? (\r\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\r\n          ) : (\r\n            <Skeleton mt=\"1px\" height={16} width={64} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"24px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HasSharesActions\r\n","import React from 'react'\r\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\nimport HasSharesActions from './HasSharesActions'\r\n\r\ninterface VaultStakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  accountHasSharesStaked: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  accountHasSharesStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken } = pool\r\n  const { t } = useTranslation()\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const renderStakeAction = () => {\r\n    return accountHasSharesStaked ? (\r\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\r\n    ) : (\r\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default VaultStakeActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport VaultApprovalAction from './VaultApprovalAction'\r\nimport VaultStakeActions from './VaultStakeActions'\r\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst CakeVaultCardActions: React.FC<{\r\n  pool: Pool\r\n  accountHasSharesStaked: boolean\r\n  isLoading: boolean\r\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\r\n  const { stakingToken, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        <Box display=\"inline\">\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {isVaultApproved ? (\r\n          <VaultStakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            accountHasSharesStaked={accountHasSharesStaked}\r\n          />\r\n        ) : (\r\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCardActions\r\n","import React from 'react'\r\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface RecentCakeProfitBalanceProps {\r\n  cakeToDisplay: number\r\n  dollarValueToDisplay: number\r\n  dateStringToDisplay: string\r\n}\r\n\r\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\r\n  cakeToDisplay,\r\n  dollarValueToDisplay,\r\n  dateStringToDisplay,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" FARM\" />\r\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    {\r\n      placement: 'bottom-end',\r\n    },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\r\n      </TooltipText>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitBalance\r\n","import React from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent FARM profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, CardBody, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from '../PoolCard/AprRow'\r\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\r\nimport CardFooter from '../PoolCard/CardFooter'\r\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\r\nimport VaultCardActions from './VaultCardActions'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\r\n\r\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\r\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\r\n`\r\n\r\ninterface CakeVaultProps {\r\n  pool: Pool\r\n  showStakedOnly: boolean\r\n}\r\n\r\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading },\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  const isLoading = !pool.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  if (showStakedOnly && !accountHasSharesStaked) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <StyledCard isPromoted={{ isDesktop: isXl }}>\r\n      <StyledCardInner>\r\n        <StyledCardHeader\r\n          isStaking={accountHasSharesStaked}\r\n          isAutoVault\r\n          earningToken={tokens.cake}\r\n          stakingToken={tokens.cake}\r\n        />\r\n        <StyledCardBody isLoading={isLoading}>\r\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n          <Box mt=\"24px\">\r\n            <RecentCakeProfitRow />\r\n          </Box>\r\n          <Box mt=\"8px\">\r\n            <UnstakingFeeCountdownRow />\r\n          </Box>\r\n          <Flex mt=\"32px\" flexDirection=\"column\">\r\n            {account ? (\r\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\r\n            ) : (\r\n              <>\r\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                  {t('Start earning')}\r\n                </Text>\r\n                <UnlockButton />\r\n              </>\r\n            )}\r\n          </Flex>\r\n        </StyledCardBody>\r\n        <CardFooter pool={pool} account={account} />\r\n      </StyledCardInner>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCard\r\n","import React from 'react'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport {\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Toggle,\r\n  Text,\r\n  Flex,\r\n  NotificationDot,\r\n  useMatchBreakpoints,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\r\n\r\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n\r\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n\r\n  const liveOrFinishedSwitch = (\r\n    <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n      <ButtonMenuItem as={Link} to={`${url}`}>\r\n        {t('Live')}\r\n      </ButtonMenuItem>\r\n      <NotificationDot show={hasStakeInFinishedPools}>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {t('Finished')}\r\n        </ButtonMenuItem>\r\n      </NotificationDot>\r\n    </ButtonMenu>\r\n  )\r\n\r\n  const stakedOnlySwitch = (\r\n    <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\r\n      <Toggle scale=\"sm\" checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\r\n      <Text ml={['4px', '4px', '8px']}>{t('Staked only')}</Text>\r\n    </Flex>\r\n  )\r\n\r\n  if (isXs || isSm) {\r\n    return (\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\" mb=\"24px\">\r\n        <Flex width=\"100%\" justifyContent=\"space-between\">\r\n          {viewModeToggle}\r\n          {liveOrFinishedSwitch}\r\n        </Flex>\r\n        {stakedOnlySwitch}\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      justifyContent={['space-around', 'space-around', 'flex-start']}\r\n      mb={['24px', '24px', '24px', '0px']}\r\n    >\r\n      {viewModeToggle}\r\n      {liveOrFinishedSwitch}\r\n      {stakedOnlySwitch}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\n\r\ninterface BountyModalProps {\r\n  onDismiss?: () => void\r\n  TooltipComponent: React.ElementType\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 16px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst BountyModal: React.FC<BountyModalProps> = ({ onDismiss, TooltipComponent }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { theme } = useTheme()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const {\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: { callFee },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const callFeeAsDecimal = callFee / 100\r\n  const totalYieldToDisplay = getBalanceNumber(totalPendingCakeHarvest, 18)\r\n\r\n  const estimatedDollarBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\r\n  }, [cakePriceBusd, estimatedCakeBountyReward])\r\n\r\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\r\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\r\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\r\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\r\n    placement: 'bottom',\r\n    tooltipPadding: { right: 15 },\r\n  })\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await cakeVaultContract.harvest({ gasLimit: 300000 })\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Bounty collected!'), t('FARM bounty has been sent to your wallet.'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Bounty')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      {tooltipVisible && tooltip}\r\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\r\n        <Text>{t('You’ll claim')}</Text>\r\n        <Flex flexDirection=\"column\">\r\n          <Balance bold value={cakeBountyToDisplay} decimals={7} unit=\" FARM\" />\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              color=\"textSubtle\"\r\n              value={dollarBountyToDisplay}\r\n              decimals={2}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('Pool total pending yield')}\r\n        </Text>\r\n        <Balance color=\"textSubtle\" value={totalYieldToDisplay} unit=\" FARM\" />\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('Bounty')}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {callFeeAsDecimal}%\r\n        </Text>\r\n      </Flex>\r\n      {account ? (\r\n        <Button\r\n          isLoading={pendingTx}\r\n          disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          onClick={handleConfirmClick}\r\n          mb=\"28px\"\r\n          id=\"autoCakeConfirmBounty\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      ) : (\r\n        <UnlockButton mb=\"28px\" />\r\n      )}\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\r\n          {t('What’s this?')}\r\n        </Text>\r\n        <span ref={targetRef}>\r\n          <HelpIcon color=\"textSubtle\" />\r\n        </span>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BountyModal\r\n","import React, { useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Text,\r\n  Flex,\r\n  HelpIcon,\r\n  Button,\r\n  Heading,\r\n  Skeleton,\r\n  useModal,\r\n  Box,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport BountyModal from './BountyModal'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n  flex: 1;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 240px;\r\n  }\r\n`\r\n\r\nconst BountyCard = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    estimatedCakeBountyReward,\r\n    fees: { callFee },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n\r\n  const estimatedDollarBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\r\n  }, [cakePriceBusd, estimatedCakeBountyReward])\r\n\r\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\r\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\r\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\r\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\r\n\r\n//  // console.log('estimatedCakeBountyReward:',estimatedCakeBountyReward); \r\n\r\n  const TooltipComponent = ({ fee }: { fee: number }) => (\r\n    <>\r\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\r\n      <Text mb=\"16px\">\r\n        {t(\r\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto FARM Pool’s compounding function for everyone.',\r\n        )}\r\n      </Text>\r\n      <Text style={{ fontWeight: 'bold' }}>\r\n        {t('Auto-Compound Bounty: %fee%% of all Auto FARM pool users pending yield', { fee: fee / 100 })}\r\n      </Text>\r\n    </>\r\n  )\r\n\r\n  const [onPresentBountyModal] = useModal(<BountyModal TooltipComponent={TooltipComponent} />)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <StyledCard>\r\n        <CardBody>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\" mb=\"12px\">\r\n              <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\r\n                {t('Auto FARM Bounty')}\r\n              </Text>\r\n              <Box ref={targetRef}>\r\n                <HelpIcon color=\"textSubtle\" />\r\n              </Box>\r\n            </Flex>\r\n          </Flex>\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Flex flexDirection=\"column\" mr=\"12px\">\r\n              <Heading>\r\n                {hasFetchedCakeBounty ? (\r\n                  <Balance fontSize=\"20px\" bold value={cakeBountyToDisplay} decimals={3} />\r\n                ) : (\r\n                  <Skeleton height={20} width={96} mb=\"2px\" />\r\n                )}\r\n              </Heading>\r\n              {hasFetchedDollarBounty ? (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  value={dollarBountyToDisplay}\r\n                  decimals={2}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              ) : (\r\n                <Skeleton height={16} width={62} />\r\n              )}\r\n            </Flex>\r\n            <Button\r\n              disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\r\n              onClick={onPresentBountyModal}\r\n              scale=\"sm\"\r\n              id=\"clickClaimVaultBounty\"\r\n            >\r\n              {t('Claim')}\r\n            </Button>\r\n          </Flex>\r\n        </CardBody>\r\n      </StyledCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BountyCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, HelpIcon, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ButtonText = styled(Text)`\r\n  display: none;\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n  margin-right: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  &:hover {\r\n    text-decoration: none;\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst HelpButton = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledLink external href=\"https://docs.pancakeswap.finance/syrup-pools/syrup-pool\">\r\n      <Button px={['14px', null, null, null, '20px']} variant=\"subtle\">\r\n        <ButtonText color=\"backgroundAlt\" bold fontSize=\"16px\">\r\n          {t('Help')}\r\n        </ButtonText>\r\n        <HelpIcon color=\"backgroundAlt\" ml={[null, null, null, 0, '6px']} />\r\n      </Button>\r\n    </StyledLink>\r\n  )\r\n}\r\n\r\nexport default HelpButton\r\n","import { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseCell = styled.div`\r\n  color: black;\r\n\r\n  padding: 24px 8px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`\r\n\r\nexport const CellContent = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-height: 40px;\r\n  ${Text} {\r\n    line-height: 1;\r\n  }\r\n`\r\n\r\nexport default BaseCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface NameCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 5;\r\n  flex-direction: row;\r\n  padding-left: 12px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 150px;\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\r\n  const {\r\n    userData: { userShares },\r\n  } = useCakeVault()\r\n  const hasVaultShares = userShares && userShares.gt(0)\r\n\r\n  const stakingTokenSymbol = stakingToken.symbol\r\n  const earningTokenSymbol = earningToken.symbol\r\n\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\r\n\r\n  let title = `${t('Earn')} ${earningTokenSymbol}`\r\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\r\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\r\n\r\n  if (isAutoVault) {\r\n    title = t('Auto FARM')\r\n    subtitle = t('Automatic restaking')\r\n  } else if (isManualCakePool) {\r\n    title = t('Manual FARM')\r\n    subtitle = `${t('Earn')} FARM ${t('Stake').toLocaleLowerCase()} FARM`\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isAutoVault ? (\r\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\r\n      ) :\r\n       (\r\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\r\n      )\r\n      }\r\n      <CellContent>\r\n        {showStakedTag && (\r\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\r\n            {t('Staked')}\r\n          </Text>\r\n        )}\r\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\r\n          {title}\r\n        </Text>\r\n        {showSubtitle && (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default NameCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\n\r\ninterface EarningsCellProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 4.5;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 120px;\r\n  }\r\n`\r\n\r\nconst HelpIconWrapper = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto FARM vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = account && earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto FARM vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  const labelText = isAutoVault ? t('Recent FARM profit') : t('%asset% Earned', { asset: earningToken.symbol })\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" FARM\" />\r\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isManualCakePool}\r\n    />,\r\n  )\r\n\r\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentCollect()\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {labelText}\r\n        </Text>\r\n        {!userDataLoaded && account ? (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        ) : (\r\n          <>\r\n            {tooltipVisible && tooltip}\r\n            <Flex>\r\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\r\n                <Balance\r\n                  mt=\"4px\"\r\n                  bold={!isXs && !isSm}\r\n                  fontSize={isXs || isSm ? '14px' : '16px'}\r\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\r\n                  decimals={hasEarnings ? 5 : 1}\r\n                  value={hasEarnings ? earningTokenBalance : 0}\r\n                />\r\n                {hasEarnings ? (\r\n                  <>\r\n                    {earningTokenPrice > 0 && (\r\n                      <Balance\r\n                        display=\"inline\"\r\n                        fontSize=\"12px\"\r\n                        color=\"textSubtle\"\r\n                        decimals={2}\r\n                        prefix=\"~\"\r\n                        value={earningTokenDollarBalance}\r\n                        unit=\" USD\"\r\n                      />\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\r\n                    0 USD\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\r\n                <HelpIconWrapper ref={targetRef}>\r\n                  <HelpIcon color=\"textSubtle\" />\r\n                </HelpIconWrapper>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EarningsCell\r\n","import React from 'react'\r\nimport { Flex, useModal, CalculateIcon, Skeleton, FlexProps, Button } from '@pancakeswap/uikit'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getAprData } from 'views/Pools/helpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface AprProps extends FlexProps {\r\n  pool: Pool\r\n  showIcon: boolean\r\n  performanceFee?: number\r\n}\r\n\r\nconst Apr: React.FC<AprProps> = ({ pool, showIcon, performanceFee = 0, ...props }) => {\r\n  const { stakingToken, earningToken, isFinished, earningTokenPrice, apr } = pool\r\n  const { t } = useTranslation()\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink =\r\n    stakingToken.address && `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${getAddress(stakingToken.address)}`\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  const openRoiModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {earningsPercentageToDisplay || isFinished ? (\r\n        <>\r\n          <Balance\r\n            onClick={openRoiModal}\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={isFinished ? 0 : earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n          />\r\n          {!isFinished && showIcon && (\r\n            <Button onClick={openRoiModal} variant=\"text\" width=\"20px\" height=\"20px\" padding=\"0px\" marginLeft=\"4px\">\r\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\r\n            </Button>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Skeleton width=\"80px\" height=\"16px\" />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport Apr from '../Apr'\r\n\r\ninterface AprCellProps {\r\n  pool: Pool\r\n  performanceFee: number\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 1 0 50px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n  }\r\n`\r\n\r\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { isAutoVault } = pool\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {isAutoVault ? t('APY') : t('APR')}\r\n        </Text>\r\n        <Apr pool={pool} performanceFee={isAutoVault ? performanceFee : 0} showIcon={!isXs && !isSm} />\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default AprCell\r\n","import React, { useMemo } from 'react'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface TotalStakedCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\r\n  const { totalCakeInVault } = useCakeVault()\r\n\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const totalStakedBalance = useMemo(() => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {t('Total staked')}\r\n        </Text>\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <Flex height=\"20px\" alignItems=\"center\">\r\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell from './BaseCell'\r\n\r\ninterface ExpandActionCellProps {\r\n  expanded: boolean\r\n  isFullLayout: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  flex: 1;\r\n  padding-right: 12px;\r\n  padding-left: 0px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n    padding-right: 32px;\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 24px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isFullLayout && (\r\n        <Text color=\"primary\" bold>\r\n          {expanded ? t('Hide') : t('Details')}\r\n        </Text>\r\n      )}\r\n      <ArrowIcon color=\"primary\" toggled={expanded} />\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 32px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React from 'react'\r\nimport { Button, Text, useModal, Flex, TooltipText, useTooltip, Skeleton, Heading } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\r\n\r\ninterface HarvestActionProps extends Pool {\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\r\n  sousId,\r\n  poolCategory,\r\n  earningToken,\r\n  userData,\r\n  userDataLoaded,\r\n  isAutoVault,\r\n  earningTokenPrice,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto FARM vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const isCompoundPool = sousId === 0\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto FARM vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    pricePerFullShare,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isCompoundPool}\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const actionTitle = isAutoVault ? (\r\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n      {t('Recent FARM profit')}\r\n    </Text>\r\n  ) : (\r\n    <>\r\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n        {earningToken.symbol}{' '}\r\n      </Text>\r\n      <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n        {t('Earned')}\r\n      </Text>\r\n    </>\r\n  )\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>{actionTitle}</ActionTitles>\r\n        <ActionContent>\r\n          <Balance pt=\"8px\" lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={0} />\r\n          <Button disabled>{isCompoundPool ? t('Collect') : t('Harvest')}</Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>{actionTitle}</ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>{actionTitle}</ActionTitles>\r\n      <ActionContent>\r\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n          <>\r\n            {hasEarnings ? (\r\n              <>\r\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\r\n                {earningTokenPrice > 0 && (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color=\"textSubtle\"\r\n                    decimals={2}\r\n                    prefix=\"~\"\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                  />\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Heading color=\"textDisabled\">0</Heading>\r\n                <Text fontSize=\"12px\" color=\"textDisabled\">\r\n                  0 USD\r\n                </Text>\r\n              </>\r\n            )}\r\n          </>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\r\n            <UnstakingFeeCountdownRow isTableVariant />\r\n            <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              {tooltipVisible && tooltip}\r\n              <TooltipText ref={targetRef} small>\r\n                {t('Performance Fee')}\r\n              </TooltipText>\r\n              <Flex alignItems=\"center\">\r\n                <Text ml=\"4px\" small>\r\n                  {performanceFee / 100}%\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          </Flex>\r\n        ) : (\r\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\r\n            {isCompoundPool ? t('Collect') : t('Harvest')}\r\n          </Button>\r\n        )}\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\r\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\r\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps {\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    stakingLimit,\r\n    isFinished,\r\n    poolCategory,\r\n    userData,\r\n    stakingTokenPrice,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\r\n    stakingTokenContract,\r\n    sousId,\r\n    earningToken.symbol,\r\n  )\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\r\n    useVaultApprove(setLastUpdated)\r\n\r\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\r\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\r\n\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\r\n\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const hasSharesStaked = userShares && userShares.gt(0)\r\n  const isVaultWithShares = isAutoVault && hasSharesStaked\r\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\r\n\r\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  const onStake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultStake()\r\n    } else {\r\n      onPresentStake()\r\n    }\r\n  }\r\n\r\n  const onUnstake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultUnstake()\r\n    } else {\r\n      onPresentUnstake()\r\n    }\r\n  }\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (needsApproval) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Enable pool')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n            {t('Enable')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  // Wallet connected, user data loaded and approved\r\n  if (isNotVaultAndHasStake || isVaultWithShares) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n            {stakingToken.symbol}{' '}\r\n          </Text>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n            <Balance\r\n              lineHeight=\"1\"\r\n              bold\r\n              fontSize=\"20px\"\r\n              decimals={5}\r\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\r\n            />\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              color=\"textSubtle\"\r\n              decimals={2}\r\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Flex>\r\n          <IconButtonWrapper>\r\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\r\n              <MinusIcon color=\"primary\" width=\"14px\" />\r\n            </IconButton>\r\n            {reachStakingLimit ? (\r\n              <span ref={targetRef}>\r\n                <IconButton variant=\"secondary\" disabled>\r\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n                </IconButton>\r\n              </span>\r\n            ) : (\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n                disabled={isFinished}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            )}\r\n          </IconButtonWrapper>\r\n          {tooltipVisible && tooltip}\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n          {t('Stake')}{' '}\r\n        </Text>\r\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n          {stakingToken.symbol}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n          variant=\"secondary\"\r\n          disabled={isFinished}\r\n        >\r\n          {t('Stake')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HelpIcon,\r\n  Link,\r\n  LinkExternal,\r\n  MetamaskIcon,\r\n  Skeleton,\r\n  Text,\r\n  TimerIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport Harvest from './Harvest'\r\nimport Stake from './Stake'\r\nimport Apr from '../Apr'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 700px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 700px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  justify-content: center;\r\n  padding: 12px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\ntype MediaBreakpoints = {\r\n  isXs: boolean\r\n  isSm: boolean\r\n  isMd: boolean\r\n  isLg: boolean\r\n  isXl: boolean\r\n}\r\n\r\ninterface ActionPanelProps {\r\n  account: string\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n  expanded: boolean\r\n  breakpoints: MediaBreakpoints\r\n}\r\n\r\nconst InfoSection = styled(Box)`\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  flex-basis: auto;\r\n  padding: 8px 8px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding: 0;\r\n    flex-basis: 230px;\r\n  }\r\n`\r\n\r\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const { currentBlock } = useBlock()\r\n  const { isXs, isSm, isMd } = breakpoints\r\n  const showSubtitle = (isXs || isSm) && sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const {\r\n    targetRef: tagTargetRef,\r\n    tooltip: tagTooltip,\r\n    tooltipVisible: tagTooltipVisible,\r\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom-start',\r\n  })\r\n\r\n  const maxStakeRow = stakingLimit.gt(0) ? (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n      <Text>{t('Max. stake per user')}:</Text>\r\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n    </Flex>\r\n  ) : null\r\n\r\n  const blocksRow =\r\n    blocksRemaining || blocksUntilStart ? (\r\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n        <Flex>\r\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n              {t('Blocks')}\r\n            </Text>\r\n            <TimerIcon ml=\"4px\" color=\"primary\" />\r\n          </Link>\r\n        </Flex>\r\n      </Flex>\r\n    ) : (\r\n      <Skeleton width=\"56px\" height=\"16px\" />\r\n    )\r\n\r\n  const aprRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\r\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\r\n    </Flex>\r\n  )\r\n\r\n  const totalStakedRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\r\n      <Flex alignItems=\"center\">\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <>\r\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n            <span ref={totalStakedTargetRef}>\r\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"4px\" />\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <Skeleton width=\"56px\" height=\"16px\" />\r\n        )}\r\n        {totalStakedTooltipVisible && totalStakedTooltip}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <StyledActionPanel expanded={expanded}>\r\n      <InfoSection>\r\n        {maxStakeRow}\r\n        {(isXs || isSm) && aprRow}\r\n        {(isXs || isSm || isMd) && totalStakedRow}\r\n        {shouldShowBlockCountdown && blocksRow}\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\r\n            {t('See Token Info')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={earningToken.projectLink} bold={false}>\r\n            {t('View Project Site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        {poolContractAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <LinkExternal\r\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n              bold={false}\r\n            >\r\n              {t('View Contract')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {account && isMetaMaskInScope && tokenAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <Button\r\n              variant=\"text\"\r\n              p=\"0\"\r\n              height=\"auto\"\r\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n            >\r\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\r\n              <MetamaskIcon ml=\"4px\" />\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n        {tagTooltipVisible && tagTooltip}\r\n        <span ref={tagTargetRef}>\r\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n        </span>\r\n      </InfoSection>\r\n      <ActionContainer>\r\n        {showSubtitle && (\r\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\r\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} FARM ${t('Stake').toLocaleLowerCase()} FARM`}\r\n          </Text>\r\n        )}\r\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\r\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\r\n      </ActionContainer>\r\n    </StyledActionPanel>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport NameCell from './Cells/NameCell'\r\nimport EarningsCell from './Cells/EarningsCell'\r\nimport AprCell from './Cells/AprCell'\r\nimport TotalStakedCell from './Cells/TotalStakedCell'\r\nimport EndsInCell from './Cells/EndsInCell'\r\nimport ExpandActionCell from './Cells/ExpandActionCell'\r\nimport ActionPanel from './ActionPanel/ActionPanel'\r\n\r\ninterface PoolRowProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  background-color: transparent;\r\n  display: flex;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\r\n\r\n  const toggleExpanded = () => {\r\n    setExpanded((prev) => !prev)\r\n  }\r\n\r\n  const {\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n//   // console.log(\"rockit\",performanceFeeAsDecimal)\r\n\r\n  return (\r\n    <>\r\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\r\n        <NameCell pool={pool} />\r\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\r\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\r\n        {isXl && <EndsInCell pool={pool} />}\r\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\r\n      </StyledRow>\r\n      {shouldRenderActionPanel && (\r\n        <ActionPanel\r\n          account={account}\r\n          pool={pool}\r\n          userDataLoaded={userDataLoaded}\r\n          expanded={expanded}\r\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolRow\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport PoolRow from './PoolRow'\r\n\r\ninterface PoolsTableProps {\r\n  pools: Pool[]\r\n  userDataLoaded: boolean\r\n  account: string\r\n}\r\n\r\nconst StyledTable = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  > div:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\r\n  }\r\n`\r\n\r\nconst StyledTableBorder = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 1px 1px 3px 1px;\r\n  background-size: 400% 400%;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\r\n  const { t } = useTranslation()\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n  return (\r\n    <StyledTableBorder>\r\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\r\n        {pools.map((pool) => (\r\n          <PoolRow\r\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\r\n            pool={pool}\r\n            account={account}\r\n            userDataLoaded={userDataLoaded}\r\n          />\r\n        ))}\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </StyledTable>\r\n    </StyledTableBorder>\r\n  )\r\n}\r\n\r\nexport default PoolsTable\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport HelpButton from './components/HelpButton'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n`\r\n\r\nconst PoolControls = styled(Flex)`\r\n  flex-direction: column;\r\n  margin-bottom: 24px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst SearchSortContainer = styled(Flex)`\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Autofarm: React.FC = () => {\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\r\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\r\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n      finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  const poolsToShow = () => { \r\n    let chosenPools = [];\r\n    let myArray = [];\r\n    const finalArray = [];\r\n    if (showFinishedPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else {\r\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n    }\r\n\r\n    if (searchQuery) {\r\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n      chosenPools = chosenPools.filter((pool) =>\r\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n      )\r\n    }\r\n\r\n    myArray = sortPools(chosenPools).slice(0, numberOfPoolsVisible);\r\n    myArray.forEach((value,index)=>{\r\n        if (value.isAutoVault) {\r\n            finalArray[index] = value;\r\n        }\r\n    });\r\n\r\n    return finalArray;\r\n  }\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {poolsToShow().map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\r\n\r\n  return (\r\n    <>\r\n     {/* <ul className=\"circles \">\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n                <li className=\"main-div main-div2\"/>\r\n        </ul> */}\r\n      <PageHeader>\r\n\r\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\r\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\r\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" className=\"head-light\" mb=\"24px\">\r\n              {t('Auto Farms')}\r\n            </Heading>\r\n            <Heading scale=\"md\" color=\"text\">\r\n              {t('Just stake some tokens to earn.')}\r\n            </Heading>\r\n            <Heading scale=\"md\" color=\"text\">\r\n              {t('High APR, low risk.')}\r\n            </Heading>\r\n          </Flex>\r\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\r\n            <HelpButton />\r\n            <BountyCard />\r\n          </Flex>\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page className=\"backbg\">\r\n        <PoolControls justifyContent=\"space-between\">\r\n          <PoolTabButtons\r\n            stakedOnly={stakedOnly}\r\n            setStakedOnly={setStakedOnly}\r\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\r\n            viewMode={viewMode}\r\n            setViewMode={setViewMode}\r\n          />\r\n          <SearchSortContainer>\r\n            <Flex flexDirection=\"column\" width=\"50%\">\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Sort by')}\r\n              </Text>\r\n              <ControlStretch>\r\n                <Select\r\n                  options={[\r\n                    {\r\n                      label: t('Hot'),\r\n                      value: 'hot',\r\n                    },\r\n                    {\r\n                      label: t('APR'),\r\n                      value: 'apr',\r\n                    },\r\n                    {\r\n                      label: t('Earned'),\r\n                      value: 'earned',\r\n                    },\r\n                    {\r\n                      label: t('Total staked'),\r\n                      value: 'totalStaked',\r\n                    },\r\n                  ]}\r\n                  onChange={handleSortOptionChange}\r\n                />\r\n              </ControlStretch>\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" width=\"50%\">\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Search')}\r\n              </Text>\r\n              <ControlStretch>\r\n                <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\r\n              </ControlStretch>\r\n            </Flex>\r\n          </SearchSortContainer>\r\n        </PoolControls>\r\n        {showFinishedPools && (\r\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\r\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n          </Text>\r\n        )}\r\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\r\n        <div ref={loadMoreRef} />\r\n        <Image\r\n          mx=\"auto\"\r\n          mt=\"12px\"\r\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\r\n          alt=\"Pancake illustration\"\r\n          width={460}\r\n          height={100}\r\n        />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Autofarm\r\n"],"sourceRoot":""}