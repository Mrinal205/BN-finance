{"version":3,"sources":["views/Voting/helpers.ts","views/Voting/config.ts","utils/truncateWalletAddress.ts","views/Voting/components/Proposals/tags.tsx","views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx","components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx","views/Voting/components/CastVoteModal/types.ts","views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx"],"names":["isCoreProposal","proposal","author","toLowerCase","ADMIN_ADDRESS","filterProposalsByType","proposals","proposalType","ProposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","state","generateMetaData","plugins","network","strategies","name","params","symbol","address","getCakeAddress","decimals","generatePayloadData","version","SNAPSHOT_VERSION","timestamp","Date","now","toFixed","space","PANCAKE_SPACE","sendSnaphotData","message","a","fetch","SNAPSHOT_HUB_API","method","headers","Accept","body","JSON","stringify","response","ok","json","error","Error","error_description","data","getVotingPower","account","poolAddresses","block","simpleRpcProvider","getBlockNumber","blockNumber","SNAPSHOT_VOTING_API","calculateVoteResults","votes","reduce","accum","vote","choiceText","choices","choice","getTotalFromVotes","power","BigNumber","metadata","votingPower","plus","BIG_ZERO","PROPOSALS_TO_SHOW","IPFS_GATEWAY","VOTE_THRESHOLD","truncateWalletAddress","startLength","endLength","substring","length","ProposalStateTag","proposalState","props","ProposalState","ACTIVE","PENDING","ProposalTypeTag","VotingBox","styled","div","theme","colors","cardBorder","ModalInner","mb","maxWidth","Layout","mediaQueries","lg","DetailsView","total","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","t","useTranslation","as","fontSize","color","textTransform","bold","toFormat","alignItems","justifyContent","textAlign","initialState","verificationHash","useGetVotingPower","isActive","useWeb3React","useState","setVotingPower","isLoading","setIsLoading","useEffect","getActivePools","eligiblePools","map","contractAddress","getAddress","prevVotingPower","fetchVotingPower","Table","table","ThemedComponent","text","Title","scale","my","markdownComponents","h1","h2","h3","h4","h5","h6","p","ol","ul","pre","ReactMarkdown","remarkPlugins","gfm","components","ConfirmVoteView","DetailBox","Box","background","Details","startDate","start","endDate","end","href","id","ml","slice","getBscScanAddressUrl","getBscScanBlockNumberUrl","snapshot","format","TextEllipsis","Text","Results","results","votingStatus","useGetVotingStateLoadingStatus","totalVotes","VotingStateLoadingStatus","IDLE","index","choiceVotes","totalChoiceVote","progress","eq","times","toNumber","hasVoted","some","voter","mt","title","variant","outline","mr","primaryStep","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","count","height","MainView","isPending","onConfirm","onViewDetails","onDismiss","label","onClick","style","cursor","width","endIcon","spin","disabled","CastVoteModal","onSuccess","proposalId","MAIN","view","setView","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","provider","useWeb3Provider","useTheme","isStartView","handleBack","DETAILS","handleDismiss","handleConfirmVote","voteMsg","type","SnapshotCommand","VOTE","payload","value","toString","signMessage","sig","msg","console","onBack","hideCloseButton","headerBackground","gradients","cardHeader","Choice","isChecked","isDisabled","ChoiceText","Vote","setVote","toastSuccess","dispatch","useAppDispatch","handleSuccess","fetchVotes","Number","useModal","presentCastVoteModal","flexShrink","checked","onChange","UnlockButton","Row","Flex","StyledSkeleton","Skeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","Grid","sm","VoteRow","isVoter","hasVotingPower","parseVotePower","incomingVote","parseFloat","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","Proposal","useParams","useGetProposal","useGetVotes","voteLoadingStatus","proposalLoadingStatus","useGetProposalLoadingStatus","hasAccountVoted","isPageLoading","fetchProposal","verifyVotes","getVotes","Container","Link","to","startIcon","PageLoader"],"mappings":"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","file":"static/js/9.2aec575e.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\r\n\r\nexport const isCoreProposal = (proposal: Proposal) => {\r\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\r\n}\r\n\r\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\r\n  switch (proposalType) {\r\n    case ProposalType.COMMUNITY:\r\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\r\n    case ProposalType.CORE:\r\n      return proposals.filter((proposal) => isCoreProposal(proposal))\r\n    case ProposalType.ALL:\r\n    default:\r\n      return proposals\r\n  }\r\n}\r\n\r\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\r\n  return proposals.filter((proposal) => proposal.state === state)\r\n}\r\n\r\nexport interface Message {\r\n  address: string\r\n  msg: string\r\n  sig: string\r\n}\r\n\r\n/**\r\n * Generates metadata required by snapshot to validate payload\r\n */\r\nexport const generateMetaData = () => {\r\n  return {\r\n    plugins: {},\r\n    network: 56,\r\n    strategies: [{ name: 'cake', params: { symbol: 'FARM', address: getCakeAddress(), decimals: 18 } }],\r\n  }\r\n}\r\n\r\n/**\r\n * Returns data that is required on all snapshot payloads\r\n */\r\nexport const generatePayloadData = () => {\r\n  return {\r\n    version: SNAPSHOT_VERSION,\r\n    timestamp: (Date.now() / 1e3).toFixed(),\r\n    space: PANCAKE_SPACE,\r\n  }\r\n}\r\n\r\n/**\r\n * General function to send commands to the snapshot api\r\n */\r\nexport const sendSnaphotData = async (message: Message) => {\r\n  const response = await fetch(SNAPSHOT_HUB_API, {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error?.error_description)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      address: account,\r\n      block: blockNumber,\r\n      poolAddresses,\r\n    }),\r\n  })\r\n  const data = await response.json()\r\n  return data.data\r\n}\r\n\r\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\r\n  return votes.reduce((accum, vote) => {\r\n    const choiceText = vote.proposal.choices[vote.choice - 1]\r\n\r\n    return {\r\n      ...accum,\r\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getTotalFromVotes = (votes: Vote[]) => {\r\n  return votes.reduce((accum, vote) => {\r\n    const power = new BigNumber(vote.metadata?.votingPower)\r\n    return accum.plus(power)\r\n  }, BIG_ZERO)\r\n}\r\n","export const PROPOSALS_TO_SHOW = 10\r\nexport const ADMIN_ADDRESS = '0x6eaf1b33b8672c5dc40aB8f4bA3A0111723126c7'\r\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\r\nexport const SNAPSHOT_VERSION = '0.1.3'\r\nexport const PANCAKE_SPACE = 'cake.eth'\r\nexport const VOTE_THRESHOLD = 10\r\n","/**\r\n * Truncates a wallet's address\r\n */\r\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\r\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\r\n}\r\n\r\nexport default truncateWalletAddress\r\n","import React from 'react'\r\nimport { TagProps } from '@pancakeswap/uikit'\r\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\r\nimport { ProposalState } from 'state/types'\r\n\r\ninterface ProposalStateTagProps extends TagProps {\r\n  proposalState: ProposalState\r\n}\r\n\r\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\r\n  if (proposalState === ProposalState.ACTIVE) {\r\n    return <VoteNowTag {...props} />\r\n  }\r\n\r\n  if (proposalState === ProposalState.PENDING) {\r\n    return <SoonTag {...props} />\r\n  }\r\n\r\n  return <ClosedTag {...props} />\r\n}\r\n\r\ninterface ProposalTypeTagProps extends TagProps {\r\n  isCoreProposal: boolean\r\n}\r\n\r\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\r\n  if (isCoreProposal) {\r\n    return <CoreTag {...props} />\r\n  }\r\n\r\n  return <CommunityTag {...props} />\r\n}\r\n","import React from 'react'\r\nimport { Box, BoxProps } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nexport const VotingBox = styled.div`\r\n  align-items: center;\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 12px;\r\n  display: flex;\r\n  height: 64px;\r\n  justify-content: space-between;\r\n  margin-bottom: 24px;\r\n  padding: 0 16px;\r\n`\r\n\r\nexport const ModalInner: React.FC<BoxProps> = (props) => {\r\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst Layout = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: minmax(0, 1fr);\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    grid-template-columns: 1fr 332px;\r\n  }\r\n`\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport { Text, Flex } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { VotingBox, ModalInner } from './styles'\r\n\r\ninterface DetailsViewProps {\r\n  total: BigNumber\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n}\r\n\r\nconst DetailsView: React.FC<DetailsViewProps> = ({\r\n  total,\r\n  cakeBalance,\r\n  cakeVaultBalance,\r\n  cakePoolBalance,\r\n  poolsBalance,\r\n  cakeBnbLpBalance,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <ModalInner mb=\"0\">\r\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\r\n        {t(\r\n          'Your voting power is determined by the amount of FARM you held at the block detailed below. FARM held in other places does not contribute to your voting power.',\r\n        )}\r\n      </Text>\r\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\r\n        {t('Overview')}\r\n      </Text>\r\n      <VotingBox>\r\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\r\n        <Text bold fontSize=\"20px\">\r\n          {total.toFormat(3)}\r\n        </Text>\r\n      </VotingBox>\r\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\r\n        {t('Your Cake Held Now')}\r\n      </Text>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Wallet')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakeBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Manual FARM Pool')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakePoolBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Auto FARM Pool')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakeVaultBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Other Syrup Pools')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{poolsBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('FARM BNB LP')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakeBnbLpBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n    </ModalInner>\r\n  )\r\n}\r\n\r\nexport default DetailsView\r\n","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getActivePools } from 'utils/calls'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getVotingPower } from '../helpers'\r\n\r\ninterface State {\r\n  verificationHash: string\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n  total: BigNumber\r\n}\r\n\r\nconst initialState: State = {\r\n  verificationHash: null,\r\n  cakeBalance: BIG_ZERO,\r\n  cakeVaultBalance: BIG_ZERO,\r\n  cakePoolBalance: BIG_ZERO,\r\n  poolsBalance: BIG_ZERO,\r\n  cakeBnbLpBalance: BIG_ZERO,\r\n  total: BIG_ZERO,\r\n}\r\n\r\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\r\n  const { account } = useWeb3React()\r\n  const [votingPower, setVotingPower] = useState(initialState)\r\n  const [isLoading, setIsLoading] = useState(!!account)\r\n\r\n  useEffect(() => {\r\n    const fetchVotingPower = async () => {\r\n      setIsLoading(true)\r\n\r\n      try {\r\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n        const eligiblePools = await getActivePools(blockNumber)\r\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\r\n        const {\r\n          cakeBalance,\r\n          cakeBnbLpBalance,\r\n          cakePoolBalance,\r\n          total,\r\n          poolsBalance,\r\n          cakeVaultBalance,\r\n          verificationHash,\r\n        } = await getVotingPower(account, poolAddresses, blockNumber)\r\n\r\n        if (isActive) {\r\n          setVotingPower((prevVotingPower) => ({\r\n            ...prevVotingPower,\r\n            verificationHash,\r\n            cakeBalance: new BigNumber(cakeBalance),\r\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\r\n            cakePoolBalance: new BigNumber(cakePoolBalance),\r\n            poolsBalance: new BigNumber(poolsBalance),\r\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\r\n            total: new BigNumber(total),\r\n          }))\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (account && isActive) {\r\n      fetchVotingPower()\r\n    }\r\n  }, [account, block, setVotingPower, isActive, setIsLoading])\r\n\r\n  return { ...votingPower, isLoading }\r\n}\r\n\r\nexport default useGetVotingPower\r\n","import React from 'react'\r\nimport { Heading, Text } from '@pancakeswap/uikit'\r\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\r\nimport styled from 'styled-components'\r\n\r\nconst Table = styled.table`\r\n  margin-bottom: 32px;\r\n  margin-top: 32px;\r\n  width: 100%;\r\n\r\n  td,\r\n  th {\r\n    padding: 8px;\r\n  }\r\n`\r\n\r\nconst ThemedComponent = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n\r\n  li {\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nconst Pre = styled.pre`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n  max-width: 100%;\r\n  overflow-x: auto;\r\n`\r\n\r\nconst Title = (props) => {\r\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\r\n}\r\n\r\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\r\n  h1: Title,\r\n  h2: Title,\r\n  h3: Title,\r\n  h4: Title,\r\n  h5: Title,\r\n  h6: Title,\r\n  p: (props) => {\r\n    return <Text as=\"p\" my=\"16px\" {...props} />\r\n  },\r\n  table: Table,\r\n  ol: (props) => {\r\n    return <ThemedComponent as=\"ol\" {...props} />\r\n  },\r\n  ul: (props) => {\r\n    return <ThemedComponent as=\"ul\" {...props} />\r\n  },\r\n  pre: Pre,\r\n}\r\n\r\nexport default markdownComponents\r\n","import React from 'react'\r\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\r\nimport gfm from 'remark-gfm'\r\nimport markdownComponents from './styles'\r\n\r\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\r\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\r\n}\r\n\r\nexport default ReactMarkdown\r\n","import { InjectedModalProps } from '@pancakeswap/uikit'\r\n\r\nexport enum ConfirmVoteView {\r\n  MAIN = 'main',\r\n  DETAILS = 'details',\r\n}\r\n\r\nexport interface CastVoteModalProps extends InjectedModalProps {\r\n  onSuccess: () => Promise<void>\r\n  proposalId: string\r\n  vote: {\r\n    label: string\r\n    value: number\r\n  }\r\n  block?: number\r\n}\r\n","import React from 'react'\r\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { format } from 'date-fns'\r\nimport { Proposal } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanAddressUrl, getBscScanBlockNumberUrl } from 'utils/bscscan'\r\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\r\nimport { IPFS_GATEWAY } from '../config'\r\nimport { ProposalStateTag } from '../components/Proposals/tags'\r\n\r\ninterface DetailsProps {\r\n  proposal: Proposal\r\n}\r\n\r\nconst DetailBox = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\r\n  const { t } = useTranslation()\r\n  const startDate = new Date(proposal.start * 1000)\r\n  const endDate = new Date(proposal.end * 1000)\r\n\r\n  return (\r\n    <Card mb=\"16px\">\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Details')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Flex alignItems=\"center\" mb=\"8px\">\r\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\r\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\r\n            {proposal.id.slice(0, 8)}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mb=\"8px\">\r\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\r\n          <LinkExternal href={getBscScanAddressUrl(proposal.author)} ml=\"8px\">\r\n            {truncateWalletAddress(proposal.author)}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mb=\"16px\">\r\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\r\n          <LinkExternal href={getBscScanBlockNumberUrl(proposal.snapshot)} ml=\"8px\">\r\n            {proposal.snapshot}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <DetailBox p=\"16px\">\r\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('Start Date')}\r\n            </Text>\r\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\r\n          </Flex>\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('End Date')}\r\n            </Text>\r\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\r\n          </Flex>\r\n        </DetailBox>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import styled from 'styled-components'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nconst TextEllipsis = styled(Text)`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`\r\n\r\nexport default TextEllipsis\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Heading,\r\n  Progress,\r\n  Skeleton,\r\n  Tag,\r\n  CheckmarkCircleIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport times from 'lodash/times'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\r\nimport TextEllipsis from '../components/TextEllipsis'\r\n\r\ninterface ResultsProps {\r\n  choices: string[]\r\n  votes: Vote[]\r\n}\r\n\r\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\r\n  const { t } = useTranslation()\r\n  const results = calculateVoteResults(votes)\r\n  const votingStatus = useGetVotingStateLoadingStatus()\r\n  const { account } = useWeb3React()\r\n  const totalVotes = getTotalFromVotes(votes)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Current Results')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\r\n          choices.map((choice, index) => {\r\n            const choiceVotes = results[choice] || []\r\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\r\n\r\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\r\n            const hasVoted = choiceVotes.some((vote) => {\r\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            })\r\n\r\n            return (\r\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\r\n                <Flex alignItems=\"center\" mb=\"8px\">\r\n                  <TextEllipsis mb=\"4px\" title={choice}>\r\n                    {choice}\r\n                  </TextEllipsis>\r\n                  {hasVoted && (\r\n                    <Tag variant=\"success\" outline ml=\"8px\">\r\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n                    </Tag>\r\n                  )}\r\n                </Flex>\r\n                <Box mb=\"4px\">\r\n                  <Progress primaryStep={progress} scale=\"sm\" />\r\n                </Box>\r\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\r\n                  <Text>\r\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\r\n                  </Text>\r\n                </Flex>\r\n              </Box>\r\n            )\r\n          })}\r\n\r\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\r\n          times(choices.length).map((count, index) => {\r\n            return (\r\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\r\n                <Skeleton height=\"36px\" mb=\"4px\" />\r\n              </Box>\r\n            )\r\n          })}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Text,\r\n  Skeleton,\r\n  Button,\r\n  Message as UIKitMessage,\r\n  AutoRenewIcon,\r\n  ChevronRightIcon,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TextEllipsis from '../TextEllipsis'\r\nimport { VotingBox, ModalInner } from './styles'\r\nimport { CastVoteModalProps } from './types'\r\n\r\ninterface MainViewProps {\r\n  vote: {\r\n    label: string\r\n    value: number\r\n  }\r\n  isLoading: boolean\r\n  isPending: boolean\r\n  total: BigNumber\r\n  onConfirm: () => void\r\n  onViewDetails: () => void\r\n  onDismiss: CastVoteModalProps['onDismiss']\r\n}\r\n\r\nconst MainView: React.FC<MainViewProps> = ({\r\n  vote,\r\n  total,\r\n  isPending,\r\n  isLoading,\r\n  onConfirm,\r\n  onViewDetails,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <ModalInner>\r\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\r\n          {t('Voting For')}\r\n        </Text>\r\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\r\n          {vote.label}\r\n        </TextEllipsis>\r\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\r\n          {t('Your Voting Power')}\r\n        </Text>\r\n        {isLoading ? (\r\n          <Skeleton height=\"64px\" mb=\"24px\" />\r\n        ) : (\r\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\r\n            <Text bold fontSize=\"20px\">\r\n              {total.toFormat(3)}\r\n            </Text>\r\n            <IconButton scale=\"sm\" variant=\"text\">\r\n              <ChevronRightIcon width=\"24px\" />\r\n            </IconButton>\r\n          </VotingBox>\r\n        )}\r\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\r\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\r\n        </Text>\r\n      </ModalInner>\r\n      <Button\r\n        isLoading={isPending}\r\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={isLoading || total.eq(0)}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={onConfirm}\r\n      >\r\n        {t('Confirm Vote')}\r\n      </Button>\r\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Cancel')}\r\n      </Button>\r\n      <Box mt=\"24px\" maxWidth=\"320px\">\r\n        <UIKitMessage variant=\"warning\">\r\n          <Text as=\"p\">\r\n            {t('SafePal users may be temporarily unable to vote: Please connect directly via WalletConnect instead.')}\r\n          </Text>\r\n        </UIKitMessage>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainView\r\n","import React, { useState } from 'react'\r\nimport { Box, Modal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SnapshotCommand } from 'state/types'\r\nimport { signMessage } from 'utils/web3React'\r\nimport useToast from 'hooks/useToast'\r\nimport useWeb3Provider from 'hooks/useWeb3Provider'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\r\nimport MainView from './MainView'\r\nimport DetailsView from './DetailsView'\r\nimport { generatePayloadData, Message, sendSnaphotData } from '../../helpers'\r\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\r\n\r\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\r\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\r\n  const [modalIsOpen, setModalIsOpen] = useState(true)\r\n  const [isPending, setIsPending] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const provider = useWeb3Provider()\r\n  const { theme } = useTheme()\r\n  const {\r\n    isLoading,\r\n    total,\r\n    cakeBalance,\r\n    cakeVaultBalance,\r\n    cakePoolBalance,\r\n    poolsBalance,\r\n    cakeBnbLpBalance,\r\n    verificationHash,\r\n  } = useGetVotingPower(block, modalIsOpen)\r\n\r\n  const isStartView = view === ConfirmVoteView.MAIN\r\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\r\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\r\n\r\n  const title = {\r\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\r\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\r\n  }\r\n\r\n  const handleDismiss = () => {\r\n    setModalIsOpen(false)\r\n    onDismiss()\r\n  }\r\n\r\n  const handleConfirmVote = async () => {\r\n    try {\r\n      setIsPending(true)\r\n      const voteMsg = JSON.stringify({\r\n        ...generatePayloadData(),\r\n        type: SnapshotCommand.VOTE,\r\n        payload: {\r\n          proposal: proposalId,\r\n          choice: vote.value,\r\n          metadata: {\r\n            votingPower: total.toString(),\r\n            verificationHash,\r\n          },\r\n        },\r\n      })\r\n\r\n      const sig = await signMessage(provider, account, voteMsg)\r\n      const msg: Message = { address: account, msg: voteMsg, sig }\r\n\r\n      // Save proposal to snapshot\r\n      await sendSnaphotData(msg)\r\n      setIsPending(false)\r\n\r\n      await onSuccess()\r\n\r\n      handleDismiss()\r\n    } catch (error) {\r\n      setIsPending(false)\r\n      toastError(t('Error'), error?.message)\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={title[view]}\r\n      onBack={handleBack}\r\n      onDismiss={onDismiss}\r\n      hideCloseButton={!isStartView}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Box mb=\"24px\" width=\"320px\">\r\n        {view === ConfirmVoteView.MAIN && (\r\n          <MainView\r\n            vote={vote}\r\n            isLoading={isLoading}\r\n            isPending={isPending}\r\n            total={total}\r\n            onConfirm={handleConfirmVote}\r\n            onViewDetails={handleViewDetails}\r\n            onDismiss={handleDismiss}\r\n          />\r\n        )}\r\n        {view === ConfirmVoteView.DETAILS && (\r\n          <DetailsView\r\n            total={total}\r\n            cakeBalance={cakeBalance}\r\n            cakeVaultBalance={cakeVaultBalance}\r\n            cakePoolBalance={cakePoolBalance}\r\n            poolsBalance={poolsBalance}\r\n            cakeBnbLpBalance={cakeBnbLpBalance}\r\n          />\r\n        )}\r\n      </Box>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CastVoteModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { Proposal } from 'state/types'\r\nimport { fetchVotes } from 'state/voting'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CastVoteModal from '../components/CastVoteModal'\r\n\r\ninterface VoteProps extends CardProps {\r\n  proposal: Proposal\r\n}\r\n\r\ninterface State {\r\n  label: string\r\n  value: number\r\n}\r\n\r\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\r\n  align-items: center;\r\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\r\n  border-radius: 16px;\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nconst ChoiceText = styled.div`\r\n  flex: 1;\r\n  padding-left: 16px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  width: 0;\r\n`\r\n\r\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\r\n  const [vote, setVote] = useState<State>(null)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleSuccess = async () => {\r\n    toastSuccess(t('Vote cast!'))\r\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\r\n  }\r\n\r\n  const [presentCastVoteModal] = useModal(\r\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Cast your vote')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {proposal.choices.map((choice, index) => {\r\n          const isChecked = index + 1 === vote?.value\r\n\r\n          const handleChange = () => {\r\n            setVote({\r\n              label: choice,\r\n              value: index + 1,\r\n            })\r\n          }\r\n\r\n          return (\r\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\r\n              <div style={{ flexShrink: 0 }}>\r\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\r\n              </div>\r\n              <ChoiceText>\r\n                <Text as=\"span\" title={choice}>\r\n                  {choice}\r\n                </Text>\r\n              </ChoiceText>\r\n            </Choice>\r\n          )\r\n        })}\r\n        {account ? (\r\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\r\n            {t('Cast Vote')}\r\n          </Button>\r\n        ) : (\r\n          <UnlockButton />\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Vote\r\n","import React from 'react'\r\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\nimport styled from 'styled-components'\r\n\r\nconst Row = styled(Flex)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 16px 24px;\r\n`\r\n\r\nconst StyledSkeleton = styled(Skeleton)`\r\n  flex: 1;\r\n`\r\n\r\nconst VotesLoading = () => {\r\n  return (\r\n    <Box>\r\n      {times(10).map((index) => (\r\n        <Row key={index}>\r\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\r\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\r\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\r\n        </Row>\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default VotesLoading\r\n","import styled from 'styled-components'\r\nimport { Grid, Box } from '@pancakeswap/uikit'\r\n\r\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\r\n  grid-area: address;\r\n`\r\n\r\nexport const ChoiceColumn = styled(Box)`\r\n  grid-area: choice;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const VotingPowerColumn = styled(Box)`\r\n  justify-self: end;\r\n  grid-area: vote;\r\n`\r\n\r\nconst Row = styled(Grid)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  grid-gap: 8px;\r\n  grid-template-areas: 'address choice vote';\r\n  grid-template-columns: minmax(110px, 200px) 1fr 1fr;\r\n  padding: 8px 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-gap: 16px;\r\n    padding: 16px 24px;\r\n  }\r\n`\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\r\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Vote } from 'state/types'\r\nimport { IPFS_GATEWAY } from '../../config'\r\nimport TextEllipsis from '../TextEllipsis'\r\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\r\n\r\ninterface VoteRowProps {\r\n  vote: Vote\r\n  isVoter: boolean\r\n}\r\n\r\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\r\n  const { t } = useTranslation()\r\n  const hasVotingPower = !!vote.metadata?.votingPower\r\n  const votingPower = hasVotingPower ? new BigNumber(vote.metadata.votingPower).toFormat(3) : '--'\r\n\r\n  return (\r\n    <Row>\r\n      <AddressColumn>\r\n        <Flex alignItems=\"center\">\r\n          <LinkExternal href={getBscScanAddressUrl(vote.voter)}>{truncateWalletAddress(vote.voter)}</LinkExternal>\r\n          {isVoter && (\r\n            <Tag variant=\"success\" outline ml=\"8px\">\r\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n            </Tag>\r\n          )}\r\n        </Flex>\r\n      </AddressColumn>\r\n      <ChoiceColumn>\r\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\r\n          {vote.proposal.choices[vote.choice - 1]}\r\n        </TextEllipsis>\r\n      </ChoiceColumn>\r\n      <VotingPowerColumn>\r\n        <Flex alignItems=\"center\" justifyContent=\"end\">\r\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\r\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\r\n        </Flex>\r\n      </VotingPowerColumn>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default VoteRow\r\n","import React, { useState } from 'react'\r\nimport {\r\n  AutoRenewIcon,\r\n  Card,\r\n  CardHeader,\r\n  ChevronDownIcon,\r\n  Flex,\r\n  Heading,\r\n  Button,\r\n  ChevronUpIcon,\r\n  Text,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/hooks'\r\nimport VotesLoading from '../components/Proposal/VotesLoading'\r\nimport VoteRow from '../components/Proposal/VoteRow'\r\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../components/Proposal/Row'\r\n\r\nconst VOTES_PER_VIEW = 20\r\n\r\ninterface VotesProps {\r\n  votes: Vote[]\r\n}\r\n\r\nconst parseVotePower = (incomingVote: Vote) => {\r\n  return parseFloat(incomingVote?.metadata?.votingPower)\r\n}\r\n\r\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\r\n  const [showAll, setShowAll] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\r\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\r\n  const voteStatus = useGetVotingStateLoadingStatus()\r\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\r\n\r\n  const handleClick = () => {\r\n    setShowAll(!showAll)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\" scale=\"md\">\r\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\r\n          </Heading>\r\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\r\n        </Flex>\r\n      </CardHeader>\r\n      {!isFinished && <VotesLoading />}\r\n\r\n      {isFinished && displayVotes.length > 0 && (\r\n        <>\r\n          <Row>\r\n            <AddressColumn>\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\r\n                {t('Voter')}\r\n              </Text>\r\n            </AddressColumn>\r\n            <ChoiceColumn>\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\r\n                {t('Decision')}\r\n              </Text>\r\n            </ChoiceColumn>\r\n            <VotingPowerColumn>\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\r\n                {t('Vote Weight')}\r\n              </Text>\r\n            </VotingPowerColumn>\r\n          </Row>\r\n          {displayVotes.map((vote) => {\r\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\r\n          })}\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\r\n            <Button\r\n              width=\"100%\"\r\n              onClick={handleClick}\r\n              variant=\"text\"\r\n              endIcon={\r\n                showAll ? (\r\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\r\n                ) : (\r\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\r\n                )\r\n              }\r\n              disabled={!isFinished}\r\n            >\r\n              {showAll ? t('Hide') : t('See All')}\r\n            </Button>\r\n          </Flex>\r\n        </>\r\n      )}\r\n\r\n      {isFinished && displayVotes.length === 0 && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\r\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\r\n        </Flex>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Votes\r\n","import React, { useEffect } from 'react'\r\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetProposal, useGetVotingStateLoadingStatus, useGetVotes, useGetProposalLoadingStatus } from 'state/hooks'\r\nimport { fetchProposal, fetchVotes, verifyVotes } from 'state/voting'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport ReactMarkdown from 'components/ReactMarkdown'\r\nimport PageLoader from 'components/PageLoader'\r\nimport { isCoreProposal } from '../helpers'\r\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\r\nimport Layout from '../components/Layout'\r\nimport Details from './Details'\r\nimport Results from './Results'\r\nimport Vote from './Vote'\r\nimport Votes from './Votes'\r\n\r\nconst Proposal = () => {\r\n  const { id }: { id: string } = useParams()\r\n  const proposal = useGetProposal(id)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const votes = useGetVotes(id)\r\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\r\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\r\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\r\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\r\n  const isPageLoading =\r\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProposal(id))\r\n  }, [id, dispatch])\r\n\r\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\r\n  useEffect(() => {\r\n    const getVotes = async () => {\r\n      await dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\r\n      dispatch(verifyVotes({ proposalId, snapshot }))\r\n    }\r\n\r\n    if (proposalId && snapshot) {\r\n      getVotes()\r\n    }\r\n  }, [proposalId, snapshot, dispatch])\r\n\r\n  if (!proposal) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <Container py=\"40px\">\r\n      <Box mb=\"40px\">\r\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\r\n          {t('Back to Vote Overview')}\r\n        </Button>\r\n      </Box>\r\n      <Layout>\r\n        <Box>\r\n          <Box mb=\"32px\">\r\n            <Flex alignItems=\"center\" mb=\"8px\">\r\n              <ProposalStateTag proposalState={proposal.state} />\r\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\r\n            </Flex>\r\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\r\n              {proposal.title}\r\n            </Heading>\r\n            <Box>\r\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\r\n            </Box>\r\n          </Box>\r\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\r\n            <Vote proposal={proposal} mb=\"16px\" />\r\n          )}\r\n          <Votes votes={votes} />\r\n        </Box>\r\n        <Box>\r\n          <Details proposal={proposal} />\r\n          <Results choices={proposal.choices} votes={votes} />\r\n        </Box>\r\n      </Layout>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Proposal\r\n"],"sourceRoot":""}